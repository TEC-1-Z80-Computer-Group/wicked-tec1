{"version":3,"sources":["src/worker/z80.js","src/worker/ROM.js","intel-hex.js","src/worker/worker.js"],"names":["Z80","coreParameter","core","mem_read","mem_write","io_read","io_write","a","b","c","d","e","h","l","a_prime","b_prime","c_prime","d_prime","e_prime","h_prime","l_prime","ix","iy","i","r","sp","pc","flags","S","Z","Y","H","X","P","N","C","flags_prime","imode","iff1","iff2","halted","do_delayed_di","do_delayed_ei","cycle_counter","getState","setState","state","reset","set_flags_register","reset1","run_instruction","doing_delayed_di","doing_delayed_ei","opcode","decode_instruction","console","log","retval","interrupt","non_maskable","data","push_word","vector_address","get_operand","operand","op_array","do_add","do_adc","do_sub","do_sbc","do_and","do_xor","do_or","do_cp","func","instructions","cycle_counts","get_signed_offset_byte","value","get_flags_register","get_flags_prime","set_flags_prime","update_xy_flags","result","get_parity","parity_bits","pop_word","do_conditional_absolute_jump","condition","do_conditional_relative_jump","offset","do_conditional_call","do_conditional_return","do_reset","address","temp","do_inc","do_dec","do_hl_add","hl","do_hl_adc","do_hl_sbc","do_in","port","do_neg","do_ldi","read_value","do_cpi","temp_carry","do_ini","do_outi","do_ldd","do_cpd","do_ind","do_outd","do_rlc","do_rrc","do_rl","do_rr","do_sla","do_sra","do_sll","do_srl","do_ix_add","temp_s","temp_z","temp_p","bit_number","reg_code","cycle_counts_cb","dd_instructions","cycle_counts_dd","ed_instructions","cycle_counts_ed","hl_value","temp1","temp2","ddcb_functions","undefined","ROM","const","let","this","blockAddr","blocks","block","running","active","yieldFlag","memory","Array","fill","inPorts","outPorts","cpu","addr","updateDisplay","postOutPorts","display","self","onmessage","event","type","loadROM","run","hidden","pending","setTimeout","digits","segments","mask","getPortsBuffer","buffer","ArrayBuffer","view","Uint8Array","getDisplayBuffer","postMessage","MemoryMap","fromHex","keys","get","length"],"mappings":"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","file":"worker.4293523f.map","sourceRoot":"..","sourcesContent":["///////////////////////////////////////////////////////////////////////////////\n/// @file Z80.js\n///\n/// @brief Emulator for the Zilog Z80 microprocessor\n///\n/// @author Matthew Howell\n///\n/// @remarks\n///  This module is a simple, straightforward instruction interpreter.\n///   There is no fancy dynamic recompilation or cycle-accurate emulation.\n///   The author believes that this should be sufficient for any emulator that\n///   would be feasible to write in JavaScript anyway.\n///  The code and the comments in this file assume that the reader is familiar\n///   with the Z80 architecture. If you're not, here are some references I use:\n///  http://clrhome.org/table/ - Z80 instruction set tables\n///  http://www.zilog.com/docs/z80/um0080.pdf - The official manual\n///  http://www.myquest.nl/z80undocumented/z80-documented-v0.91.pdf\n///   - The Undocumented Z80, Documented\n///\n/// @copyright (c) 2013 Matthew Howell\n///  This code is released under the MIT license,\n///  a copy of which is available in the associated README.md file,\n///  or at http://opensource.org/licenses/MIT\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n/// We'll begin with the object constructor and the public API functions.\n///////////////////////////////////////////////////////////////////////////////\n\nexport function Z80(coreParameter) {\n    // Obviously we'll be needing the core object's functions again.\n    let core = coreParameter;\n\n    // The argument to this constructor should be an object containing 4 functions:\n    // mem_read(address) should return the byte at the given memory address,\n    // mem_write(address, value) should write the given value to the given memory address,\n    // io_read(port) should read a return a byte read from the given I/O port,\n    // io_write(port, value) should write the given byte to the given I/O port.\n    // If any of those functions is missing, this module cannot run.\n    if (!core || (typeof core.mem_read !== \"function\") || (typeof core.mem_write !== \"function\") ||\n        (typeof core.io_read !== \"function\") || (typeof core.io_write !== \"function\"))\n        throw (\"Z80: Core object is missing required functions.\");\n\n    // All right, let's initialize the registers.\n    // First, the standard 8080 registers.\n    let a = 0x00;\n    let b = 0x00;\n    let c = 0x00;\n    let d = 0x00;\n    let e = 0x00;\n    let h = 0x00;\n    let l = 0x00;\n    // Now the special Z80 copies of the 8080 registers\n    //  (the ones used for the SWAP instruction and such).\n    let a_prime = 0x00;\n    let b_prime = 0x00;\n    let c_prime = 0x00;\n    let d_prime = 0x00;\n    let e_prime = 0x00;\n    let h_prime = 0x00;\n    let l_prime = 0x00;\n    // And now the Z80 index registers.\n    let ix = 0x0000;\n    let iy = 0x0000;\n    // Then the \"utility\" registers: the interrupt vector,\n    //  the memory refresh, the stack pointer, and the program counter.\n    let i = 0x00;\n    let r = 0x00;\n    let sp = 0xdff0;\n    let pc = 0x0000;\n    // We don't keep an F register for the flags,\n    //  because most of the time we're only accessing a single flag,\n    //  so we optimize for that case and use utility functions\n    //  for the rarer occasions when we need to access the whole register.\n    let flags = { S: 0, Z: 0, Y: 0, H: 0, X: 0, P: 0, N: 0, C: 0 };\n    let flags_prime = { S: 0, Z: 0, Y: 0, H: 0, X: 0, P: 0, N: 0, C: 0 };\n    // And finally we have the interrupt mode and flip-flop registers.\n    let imode = 0;\n    let iff1 = 0;\n    let iff2 = 0;\n\n    // These are all specific to this implementation, not Z80 features.\n    // Keep track of whether we've had a HALT instruction called.\n    let halted = false;\n    // EI and DI wait one instruction before they take effect;\n    //  these flags tell us when we're in that wait state.\n    let do_delayed_di = false;\n    let do_delayed_ei = false;\n    // This tracks the number of cycles spent in a single instruction run,\n    //  including processing any prefixes and handling interrupts.\n    let cycle_counter = 0;\n\n    function getState() {\n        return {\n            b: b,\n            a: a,\n            c: c,\n            d: d,\n            e: e,\n            h: h,\n            l: l,\n            a_prime: a_prime,\n            b_prime: b_prime,\n            c_prime: c_prime,\n            d_prime: d_prime,\n            e_prime: e_prime,\n            h_prime: h_prime,\n            l_prime: l_prime,\n            ix: ix,\n            iy: iy,\n            i: i,\n            r: r,\n            sp: sp,\n            pc: pc,\n            flags: {\n                S: flags.S,\n                Z: flags.Z,\n                Y: flags.Y,\n                H: flags.H,\n                X: flags.X,\n                P: flags.P,\n                N: flags.N,\n                C: flags.C\n            },\n            flags_prime: {\n                S: flags_prime.S,\n                Z: flags_prime.Z,\n                Y: flags_prime.Y,\n                H: flags_prime.H,\n                X: flags_prime.X,\n                P: flags_prime.P,\n                N: flags_prime.N,\n                C: flags_prime.C\n            },\n            imode: imode,\n            iff1: iff1,\n            iff2: iff2,\n            halted: halted,\n            do_delayed_di: do_delayed_di,\n            do_delayed_ei: do_delayed_ei,\n            cycle_counter: cycle_counter\n        };\n    }\n\n    function setState(state) {\n        b = state.b;\n        a = state.a;\n        c = state.c;\n        d = state.d;\n        e = state.e;\n        h = state.h;\n        l = state.l;\n        a_prime = state.a_prime;\n        b_prime = state.b_prime;\n        c_prime = state.c_prime;\n        d_prime = state.d_prime;\n        e_prime = state.e_prime;\n        h_prime = state.h_prime;\n        l_prime = state.l_prime;\n        ix = state.ix;\n        iy = state.iy;\n        i = state.i;\n        r = state.r;\n        sp = state.sp;\n        pc = state.pc;\n        flags.S = state.flags.S;\n        flags.Z = state.flags.Z;\n        flags.Y = state.flags.Y;\n        flags.H = state.flags.H;\n        flags.X = state.flags.X;\n        flags.P = state.flags.P;\n        flags.N = state.flags.N;\n        flags.C = state.flags.C;\n        flags_prime.S = state.flags_prime.S;\n        flags_prime.Z = state.flags_prime.Z;\n        flags_prime.Y = state.flags_prime.Y;\n        flags_prime.H = state.flags_prime.H;\n        flags_prime.X = state.flags_prime.X;\n        flags_prime.P = state.flags_prime.P;\n        flags_prime.N = state.flags_prime.N;\n        flags_prime.C = state.flags_prime.C;\n        imode = state.imode;\n        iff1 = state.iff1;\n        iff2 = state.iff2;\n        halted = state.halted;\n        do_delayed_di = state.do_delayed_di;\n        do_delayed_ei = state.do_delayed_ei;\n        cycle_counter = state.cycle_counter;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////\n    /// @public reset\n    ///\n    /// @brief Re-initialize the processor as if a reset or power on had occured\n    ///////////////////////////////////////////////////////////////////////////////\n    let reset = function () {\n        // These registers are the ones that have predictable states\n        //  immediately following a power-on or a reset.\n        // The others are left alone, because their states are unpredictable.\n        sp = 0xdff0;\n        pc = 0x0000;\n        a = 0x00;\n        r = 0x00;\n        set_flags_register(0);\n        // Start up with interrupts disabled.\n        imode = 0;\n        iff1 = 0;\n        iff2 = 0;\n        // Don't start halted or in a delayed DI or EI.\n        halted = false;\n        do_delayed_di = false;\n        do_delayed_ei = false;\n        // Obviously we've not used any cycles yet.\n        cycle_counter = 0;\n    };\n\n    let reset1 = function () {\n        sp = 0xdff0;\n        pc = 0x0000;\n        halted = false;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////\n    /// @public run_instruction\n    ///\n    /// @brief Runs a single instruction\n    ///\n    /// @return The number of T cycles the instruction took to run,\n    ///          plus any time that went into handling interrupts that fired\n    ///          while this instruction was executing\n    ///////////////////////////////////////////////////////////////////////////////\n    let run_instruction = function () {\n        if (!halted) {\n            // If the previous instruction was a DI or an EI,\n            //  we'll need to disable or enable interrupts\n            //  after whatever instruction we're about to run is finished.\n            var doing_delayed_di = false, doing_delayed_ei = false;\n            if (do_delayed_di) {\n                do_delayed_di = false;\n                doing_delayed_di = true;\n            }\n            else if (do_delayed_ei) {\n                do_delayed_ei = false;\n                doing_delayed_ei = true;\n            }\n\n            // R is incremented at the start of every instruction cycle,\n            //  before the instruction actually runs.\n            // The high bit of R is not affected by this increment,\n            //  it can only be changed using the LD R, A instruction.\n            r = (r & 0x80) | (((r & 0x7f) + 1) & 0x7f);\n\n            // Read the byte at the PC and run the instruction it encodes.\n            var opcode = core.mem_read(pc);\n            try {\n                decode_instruction(opcode);\n            }\n            catch (e) {\n                console.log(`Illegal opcode ${opcode} at ${pc}`);\n                halted = true;\n            }\n            pc = (pc + 1) & 0xffff;\n\n            // Actually do the delayed interrupt disable/enable if we have one.\n            if (doing_delayed_di) {\n                iff1 = 0;\n                iff2 = 0;\n            }\n            else if (doing_delayed_ei) {\n                iff1 = 1;\n                iff2 = 1;\n            }\n\n            // And finally clear out the cycle counter for the next instruction\n            //  before returning it to the emulator core.\n            var retval = cycle_counter;\n            cycle_counter = 0;\n            return retval;\n        }\n        else {\n            // While we're halted, claim that we spent a cycle doing nothing,\n            //  so that the rest of the emulator can still proceed.\n            return 1;\n        }\n    };\n\n    ///////////////////////////////////////////////////////////////////////////////\n    /// @public interrupt\n    ///\n    /// @brief Simulates pulsing the processor's INT (or NMI) pin\n    ///\n    /// @param non_maskable - true if this is a non-maskable interrupt\n    /// @param data - the value to be placed on the data bus, if needed\n    ///////////////////////////////////////////////////////////////////////////////\n    let interrupt = function (non_maskable, data) {\n        if (non_maskable) {\n            // The high bit of R is not affected by this increment,\n            //  it can only be changed using the LD R, A instruction.\n            r = (r & 0x80) | (((r & 0x7f) + 1) & 0x7f);\n            // Non-maskable interrupts are always handled the same way;\n            //  clear IFF1 and then do a CALL 0x0066.\n            // Also, all interrupts reset the HALT state.\n            halted = false;\n            iff2 = iff1;\n            iff1 = 0;\n            push_word(pc);\n            pc = 0x66;\n            cycle_counter += 11;\n        }\n        else if (iff1) {\n            // The high bit of R is not affected by this increment,\n            //  it can only be changed using the LD R, A instruction.\n            r = (r & 0x80) | (((r & 0x7f) + 1) & 0x7f);\n\n            halted = false;\n            iff1 = 0;\n            iff2 = 0;\n\n            if (imode === 0) {\n                // In the 8080-compatible interrupt mode,\n                //  decode the content of the data bus as an instruction and run it.\n                decode_instruction(data);\n                cycle_counter += 2;\n            }\n            else if (imode === 1) {\n                // Mode 1 is always just RST 0x38.\n                push_word(pc);\n                pc = 0x38;\n                cycle_counter += 13;\n            }\n            else if (imode === 2) {\n                // Mode 2 uses the value on the data bus as in index\n                //  into the vector table pointer to by the I register.\n                push_word(pc);\n                // The Z80 manual says that this address must be 2-byte aligned,\n                //  but it doesn't appear that this is actually the case on the hardware,\n                //  so we don't attempt to enforce that here.\n                var vector_address = ((i << 8) | data);\n                pc = core.mem_read(vector_address) |\n                    (core.mem_read((vector_address + 1) & 0xffff) << 8);\n\n                cycle_counter += 19;\n            }\n        }\n    };\n\n    ///////////////////////////////////////////////////////////////////////////////\n    /// The public API functions end here.\n    ///\n    /// What begins here are just general utility functions, used variously.\n    ///////////////////////////////////////////////////////////////////////////////\n    let decode_instruction = function (opcode) {\n        // The register-to-register loads and ALU instructions\n        //  are all so uniform that we can decode them directly\n        //  instead of going into the instruction array for them.\n        // This function gets the operand for all of these instructions.\n        var get_operand = function (opcode) {\n            return ((opcode & 0x07) === 0) ? b :\n                ((opcode & 0x07) === 1) ? c :\n                    ((opcode & 0x07) === 2) ? d :\n                        ((opcode & 0x07) === 3) ? e :\n                            ((opcode & 0x07) === 4) ? h :\n                                ((opcode & 0x07) === 5) ? l :\n                                    ((opcode & 0x07) === 6) ? core.mem_read(l | (h << 8)) : a;\n        };\n\n        // Handle HALT right up front, because it fouls up our LD decoding\n        //  by falling where LD (HL), (HL) ought to be.\n        if (opcode === 0x76) {\n            halted = true;\n        }\n        else if ((opcode >= 0x40) && (opcode < 0x80)) {\n            // This entire range is all 8-bit register loads.\n            // Get the operand and assign it to the correct destination.\n            var operand = get_operand(opcode);\n\n            if (((opcode & 0x38) >>> 3) === 0)\n                b = operand;\n            else if (((opcode & 0x38) >>> 3) === 1)\n                c = operand;\n            else if (((opcode & 0x38) >>> 3) === 2)\n                d = operand;\n            else if (((opcode & 0x38) >>> 3) === 3)\n                e = operand;\n            else if (((opcode & 0x38) >>> 3) === 4)\n                h = operand;\n            else if (((opcode & 0x38) >>> 3) === 5)\n                l = operand;\n            else if (((opcode & 0x38) >>> 3) === 6)\n                core.mem_write(l | (h << 8), operand);\n            else if (((opcode & 0x38) >>> 3) === 7)\n                a = operand;\n        }\n        else if ((opcode >= 0x80) && (opcode < 0xc0)) {\n            // These are the 8-bit register ALU instructions.\n            // We'll get the operand and then use this \"jump table\"\n            //  to call the correct utility function for the instruction.\n            var operand = get_operand(opcode),\n                op_array = [do_add, do_adc, do_sub, do_sbc,\n                    do_and, do_xor, do_or, do_cp];\n\n            op_array[(opcode & 0x38) >>> 3](operand);\n        }\n        else {\n            // This is one of the less formulaic instructions;\n            //  we'll get the specific function for it from our array.\n            var func = instructions[opcode];\n            func();\n        }\n\n        // Update the cycle counter with however many cycles\n        //  the base instruction took.\n        // If this was a prefixed instruction, then\n        //  the prefix handler has added its extra cycles already.\n        cycle_counter += cycle_counts[opcode];\n    };\n\n    let get_signed_offset_byte = function (value) {\n        // This function requires some explanation.\n        // We just use JavaScript Number variables for our registers,\n        //  not like a typed array or anything.\n        // That means that, when we have a byte value that's supposed\n        //  to represent a signed offset, the value we actually see\n        //  isn't signed at all, it's just a small integer.\n        // So, this function converts that byte into something JavaScript\n        //  will recognize as signed, so we can easily do arithmetic with it.\n        // First, we clamp the value to a single byte, just in case.\n        value &= 0xff;\n        // We don't have to do anything if the value is positive.\n        if (value & 0x80) {\n            // But if the value is negative, we need to manually un-two's-compliment it.\n            // I'm going to assume you can figure out what I meant by that,\n            //  because I don't know how else to explain it.\n            // We could also just do value |= 0xffffff00, but I prefer\n            //  not caring how many bits are in the integer representation\n            //  of a JavaScript number in the currently running browser.\n            value = -((0xff & ~value) + 1);\n        }\n        return value;\n    };\n\n    let get_flags_register = function () {\n        // We need the whole F register for some reason.\n        //  probably a PUSH AF instruction,\n        //  so make the F register out of our separate flags.\n        return (flags.S << 7) |\n            (flags.Z << 6) |\n            (flags.Y << 5) |\n            (flags.H << 4) |\n            (flags.X << 3) |\n            (flags.P << 2) |\n            (flags.N << 1) |\n            (flags.C);\n    };\n\n    let get_flags_prime = function () {\n        // This is the same as the above for the F' register.\n        return (flags_prime.S << 7) |\n            (flags_prime.Z << 6) |\n            (flags_prime.Y << 5) |\n            (flags_prime.H << 4) |\n            (flags_prime.X << 3) |\n            (flags_prime.P << 2) |\n            (flags_prime.N << 1) |\n            (flags_prime.C);\n    };\n\n    let set_flags_register = function (operand) {\n        // We need to set the F register, probably for a POP AF,\n        //  so break out the given value into our separate flags.\n        flags.S = (operand & 0x80) >>> 7;\n        flags.Z = (operand & 0x40) >>> 6;\n        flags.Y = (operand & 0x20) >>> 5;\n        flags.H = (operand & 0x10) >>> 4;\n        flags.X = (operand & 0x08) >>> 3;\n        flags.P = (operand & 0x04) >>> 2;\n        flags.N = (operand & 0x02) >>> 1;\n        flags.C = (operand & 0x01);\n    };\n\n    let set_flags_prime = function (operand) {\n        // Again, this is the same as the above for F'.\n        flags_prime.S = (operand & 0x80) >>> 7;\n        flags_prime.Z = (operand & 0x40) >>> 6;\n        flags_prime.Y = (operand & 0x20) >>> 5;\n        flags_prime.H = (operand & 0x10) >>> 4;\n        flags_prime.X = (operand & 0x08) >>> 3;\n        flags_prime.P = (operand & 0x04) >>> 2;\n        flags_prime.N = (operand & 0x02) >>> 1;\n        flags_prime.C = (operand & 0x01);\n    };\n\n    let update_xy_flags = function (result) {\n        // Most of the time, the undocumented flags\n        //  (sometimes called X and Y, or 3 and 5),\n        //  take their values from the corresponding bits\n        //  of the result of the instruction,\n        //  or from some other related value.\n        // This is a utility function to set those flags based on those bits.\n        flags.Y = (result & 0x20) >>> 5;\n        flags.X = (result & 0x08) >>> 3;\n    };\n\n    let get_parity = function (value) {\n        // We could try to actually calculate the parity every time,\n        //  but why calculate what you can pre-calculate?\n        var parity_bits = [\n            1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n            0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0,\n            0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0,\n            1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n            0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0,\n            1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n            1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n            0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0,\n            0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0,\n            1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n            1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n            0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0,\n            1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n            0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0,\n            0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0,\n            1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1\n        ];\n        return parity_bits[value];\n    };\n\n    let push_word = function (operand) {\n        // Pretty obvious what this function does; given a 16-bit value,\n        //  decrement the stack pointer, write the high byte to the new\n        //  stack pointer location, then repeat for the low byte.\n        sp = (sp - 1) & 0xffff;\n        core.mem_write(sp, (operand & 0xff00) >>> 8);\n        sp = (sp - 1) & 0xffff;\n        core.mem_write(sp, operand & 0x00ff);\n    };\n\n    let pop_word = function () {\n        // Again, not complicated; read a byte off the top of the stack,\n        //  increment the stack pointer, rinse and repeat.\n        var retval = core.mem_read(sp) & 0xff;\n        sp = (sp + 1) & 0xffff;\n        retval |= core.mem_read(sp) << 8;\n        sp = (sp + 1) & 0xffff;\n        return retval;\n    };\n\n    ///////////////////////////////////////////////////////////////////////////////\n    /// Now, the way most instructions work in this emulator is that they set up\n    ///  their operands according to their addressing mode, and then they call a\n    ///  utility function that handles all variations of that instruction.\n    /// Those utility functions begin here.\n    ///////////////////////////////////////////////////////////////////////////////\n    let do_conditional_absolute_jump = function (condition) {\n        // This function implements the JP [condition],nn instructions.\n        if (condition) {\n            // We're taking this jump, so write the new PC,\n            //  and then decrement the thing we just wrote,\n            //  because the instruction decoder increments the PC\n            //  unconditionally at the end of every instruction\n            //  and we need to counteract that so we end up at the jump target.\n            pc = core.mem_read((pc + 1) & 0xffff) |\n                (core.mem_read((pc + 2) & 0xffff) << 8);\n            pc = (pc - 1) & 0xffff;\n        }\n        else {\n            // We're not taking this jump, just move the PC past the operand.\n            pc = (pc + 2) & 0xffff;\n        }\n    };\n\n    let do_conditional_relative_jump = function (condition) {\n        // This function implements the JR [condition],n instructions.\n        if (condition) {\n            // We need a few more cycles to actually take the jump.\n            cycle_counter += 5;\n            // Calculate the offset specified by our operand.\n            var offset = get_signed_offset_byte(core.mem_read((pc + 1) & 0xffff));\n            // Add the offset to the PC, also skipping past this instruction.\n            pc = (pc + offset + 1) & 0xffff;\n        }\n        else {\n            // No jump happening, just skip the operand.\n            pc = (pc + 1) & 0xffff;\n        }\n    };\n\n    let do_conditional_call = function (condition) {\n        // This function is the CALL [condition],nn instructions.\n        // If you've seen the previous functions, you know this drill.\n        if (condition) {\n            cycle_counter += 7;\n            push_word((pc + 3) & 0xffff);\n            pc = core.mem_read((pc + 1) & 0xffff) |\n                (core.mem_read((pc + 2) & 0xffff) << 8);\n            pc = (pc - 1) & 0xffff;\n        }\n        else {\n            pc = (pc + 2) & 0xffff;\n        }\n    };\n\n    let do_conditional_return = function (condition) {\n        if (condition) {\n            cycle_counter += 6;\n            pc = (pop_word() - 1) & 0xffff;\n        }\n    };\n\n    let do_reset = function (address) {\n        // The RST [address] instructions go through here.\n        push_word((pc + 1) & 0xffff);\n        pc = (address - 1) & 0xffff;\n    };\n\n    let do_add = function (operand) {\n        // This is the ADD A, [operand] instructions.\n        // We'll do the literal addition, which includes any overflow,\n        //  so that we can more easily figure out whether we had\n        //  an overflow or a carry and set the flags accordingly.\n        var result = a + operand;\n\n        // The great majority of the work for the arithmetic instructions\n        //  turns out to be setting the flags rather than the actual operation.\n        flags.S = (result & 0x80) ? 1 : 0;\n        flags.Z = !(result & 0xff) ? 1 : 0;\n        flags.H = (((operand & 0x0f) + (a & 0x0f)) & 0x10) ? 1 : 0;\n        // An overflow has happened if the sign bits of the accumulator and the operand\n        //  don't match the sign bit of the result value.\n        flags.P = ((a & 0x80) === (operand & 0x80)) && ((a & 0x80) !== (result & 0x80)) ? 1 : 0;\n        flags.N = 0;\n        flags.C = (result & 0x100) ? 1 : 0;\n\n        a = result & 0xff;\n        update_xy_flags(a);\n    };\n\n    let do_adc = function (operand) {\n        var result = a + operand + flags.C;\n\n        flags.S = (result & 0x80) ? 1 : 0;\n        flags.Z = !(result & 0xff) ? 1 : 0;\n        flags.H = (((operand & 0x0f) + (a & 0x0f) + flags.C) & 0x10) ? 1 : 0;\n        flags.P = ((a & 0x80) === (operand & 0x80)) && ((a & 0x80) !== (result & 0x80)) ? 1 : 0;\n        flags.N = 0;\n        flags.C = (result & 0x100) ? 1 : 0;\n\n        a = result & 0xff;\n        update_xy_flags(a);\n    };\n\n    let do_sub = function (operand) {\n        var result = a - operand;\n\n        flags.S = (result & 0x80) ? 1 : 0;\n        flags.Z = !(result & 0xff) ? 1 : 0;\n        flags.H = (((a & 0x0f) - (operand & 0x0f)) & 0x10) ? 1 : 0;\n        flags.P = ((a & 0x80) !== (operand & 0x80)) && ((a & 0x80) !== (result & 0x80)) ? 1 : 0;\n        flags.N = 1;\n        flags.C = (result & 0x100) ? 1 : 0;\n\n        a = result & 0xff;\n        update_xy_flags(a);\n    };\n\n    let do_sbc = function (operand) {\n        var result = a - operand - flags.C;\n\n        flags.S = (result & 0x80) ? 1 : 0;\n        flags.Z = !(result & 0xff) ? 1 : 0;\n        flags.H = (((a & 0x0f) - (operand & 0x0f) - flags.C) & 0x10) ? 1 : 0;\n        flags.P = ((a & 0x80) !== (operand & 0x80)) && ((a & 0x80) !== (result & 0x80)) ? 1 : 0;\n        flags.N = 1;\n        flags.C = (result & 0x100) ? 1 : 0;\n\n        a = result & 0xff;\n        update_xy_flags(a);\n    };\n\n    let do_cp = function (operand) {\n        // A compare instruction is just a subtraction that doesn't save the value,\n        //  so we implement it as... a subtraction that doesn't save the value.\n        var temp = a;\n        do_sub(operand);\n        a = temp;\n        // Since this instruction has no \"result\" value, the undocumented flags\n        //  are set based on the operand instead.\n        update_xy_flags(operand);\n    };\n\n    let do_and = function (operand) {\n        // The logic instructions are all pretty straightforward.\n        a &= operand & 0xff;\n        flags.S = (a & 0x80) ? 1 : 0;\n        flags.Z = !a ? 1 : 0;\n        flags.H = 1;\n        flags.P = get_parity(a);\n        flags.N = 0;\n        flags.C = 0;\n        update_xy_flags(a);\n    };\n\n    let do_or = function (operand) {\n        a = (operand | a) & 0xff;\n        flags.S = (a & 0x80) ? 1 : 0;\n        flags.Z = !a ? 1 : 0;\n        flags.H = 0;\n        flags.P = get_parity(a);\n        flags.N = 0;\n        flags.C = 0;\n        update_xy_flags(a);\n    };\n\n    let do_xor = function (operand) {\n        a = (operand ^ a) & 0xff;\n        flags.S = (a & 0x80) ? 1 : 0;\n        flags.Z = !a ? 1 : 0;\n        flags.H = 0;\n        flags.P = get_parity(a);\n        flags.N = 0;\n        flags.C = 0;\n        update_xy_flags(a);\n    };\n\n    let do_inc = function (operand) {\n        var result = operand + 1;\n\n        flags.S = (result & 0x80) ? 1 : 0;\n        flags.Z = !(result & 0xff) ? 1 : 0;\n        flags.H = ((operand & 0x0f) === 0x0f) ? 1 : 0;\n        // It's a good deal easier to detect overflow for an increment/decrement.\n        flags.P = (operand === 0x7f) ? 1 : 0;\n        flags.N = 0;\n\n        result &= 0xff;\n        update_xy_flags(result);\n\n        return result;\n    };\n\n    let do_dec = function (operand) {\n        var result = operand - 1;\n\n        flags.S = (result & 0x80) ? 1 : 0;\n        flags.Z = !(result & 0xff) ? 1 : 0;\n        flags.H = ((operand & 0x0f) === 0x00) ? 1 : 0;\n        flags.P = (operand === 0x80) ? 1 : 0;\n        flags.N = 1;\n\n        result &= 0xff;\n        update_xy_flags(result);\n\n        return result;\n    };\n\n    let do_hl_add = function (operand) {\n        // The HL arithmetic instructions are the same as the A ones,\n        //  just with twice as many bits happening.\n        var hl = l | (h << 8), result = hl + operand;\n\n        flags.N = 0;\n        flags.C = (result & 0x10000) ? 1 : 0;\n        flags.H = (((hl & 0x0fff) + (operand & 0x0fff)) & 0x1000) ? 1 : 0;\n\n        l = result & 0xff;\n        h = (result & 0xff00) >>> 8;\n\n        update_xy_flags(h);\n    };\n\n    let do_hl_adc = function (operand) {\n        operand += flags.C;\n        var hl = l | (h << 8), result = hl + operand;\n\n        flags.S = (result & 0x8000) ? 1 : 0;\n        flags.Z = !(result & 0xffff) ? 1 : 0;\n        flags.H = (((hl & 0x0fff) + (operand & 0x0fff)) & 0x1000) ? 1 : 0;\n        flags.P = ((hl & 0x8000) === (operand & 0x8000)) && ((result & 0x8000) !== (hl & 0x8000)) ? 1 : 0;\n        flags.N = 0;\n        flags.C = (result & 0x10000) ? 1 : 0;\n\n        l = result & 0xff;\n        h = (result >>> 8) & 0xff;\n\n        update_xy_flags(h);\n    };\n\n    let do_hl_sbc = function (operand) {\n        operand += flags.C;\n        var hl = l | (h << 8), result = hl - operand;\n\n        flags.S = (result & 0x8000) ? 1 : 0;\n        flags.Z = !(result & 0xffff) ? 1 : 0;\n        flags.H = (((hl & 0x0fff) - (operand & 0x0fff)) & 0x1000) ? 1 : 0;\n        flags.P = ((hl & 0x8000) !== (operand & 0x8000)) && ((result & 0x8000) !== (hl & 0x8000)) ? 1 : 0;\n        flags.N = 1;\n        flags.C = (result & 0x10000) ? 1 : 0;\n\n        l = result & 0xff;\n        h = (result >>> 8) & 0xff;\n\n        update_xy_flags(h);\n    };\n\n    let do_in = function (port) {\n        var result = core.io_read(port);\n\n        flags.S = (result & 0x80) ? 1 : 0;\n        flags.Z = result ? 0 : 1;\n        flags.H = 0;\n        flags.P = get_parity(result) ? 1 : 0;\n        flags.N = 0;\n        update_xy_flags(result);\n\n        return result;\n    };\n\n    let do_neg = function () {\n        // This instruction is defined to not alter the register if it === 0x80.\n        if (a !== 0x80) {\n            // This is a signed operation, so convert A to a signed value.\n            a = get_signed_offset_byte(a);\n\n            a = (-a) & 0xff;\n        }\n\n        flags.S = (a & 0x80) ? 1 : 0;\n        flags.Z = !a ? 1 : 0;\n        flags.H = (((-a) & 0x0f) > 0) ? 1 : 0;\n        flags.P = (a === 0x80) ? 1 : 0;\n        flags.N = 1;\n        flags.C = a ? 1 : 0;\n        update_xy_flags(a);\n    };\n\n    let do_ldi = function () {\n        // Copy the value that we're supposed to copy.\n        var read_value = core.mem_read(l | (h << 8));\n        core.mem_write(e | (d << 8), read_value);\n\n        // Increment DE and HL, and decrement BC.\n        var result = (e | (d << 8)) + 1;\n        e = result & 0xff;\n        d = (result & 0xff00) >>> 8;\n        result = (l | (h << 8)) + 1;\n        l = result & 0xff;\n        h = (result & 0xff00) >>> 8;\n        result = (c | (b << 8)) - 1;\n        c = result & 0xff;\n        b = (result & 0xff00) >>> 8;\n\n        flags.H = 0;\n        flags.P = (c || b) ? 1 : 0;\n        flags.N = 0;\n        flags.Y = ((a + read_value) & 0x02) >>> 1;\n        flags.X = ((a + read_value) & 0x08) >>> 3;\n    };\n\n    let do_cpi = function () {\n        var temp_carry = flags.C;\n        var read_value = core.mem_read(l | (h << 8))\n        do_cp(read_value);\n        flags.C = temp_carry;\n        flags.Y = ((a - read_value - flags.H) & 0x02) >>> 1;\n        flags.X = ((a - read_value - flags.H) & 0x08) >>> 3;\n\n        var result = (l | (h << 8)) + 1;\n        l = result & 0xff;\n        h = (result & 0xff00) >>> 8;\n        result = (c | (b << 8)) - 1;\n        c = result & 0xff;\n        b = (result & 0xff00) >>> 8;\n\n        flags.P = result ? 1 : 0;\n    };\n\n    let do_ini = function () {\n        b = do_dec(b);\n\n        core.mem_write(l | (h << 8), core.io_read((b << 8) | c));\n\n        var result = (l | (h << 8)) + 1;\n        l = result & 0xff;\n        h = (result & 0xff00) >>> 8;\n\n        flags.N = 1;\n    };\n\n    let do_outi = function () {\n        core.io_write((b << 8) | c, core.mem_read(l | (h << 8)));\n\n        var result = (l | (h << 8)) + 1;\n        l = result & 0xff;\n        h = (result & 0xff00) >>> 8;\n\n        b = do_dec(b);\n        flags.N = 1;\n    };\n\n    let do_ldd = function () {\n        flags.N = 0;\n        flags.H = 0;\n\n        var read_value = core.mem_read(l | (h << 8));\n        core.mem_write(e | (d << 8), read_value);\n\n        var result = (e | (d << 8)) - 1;\n        e = result & 0xff;\n        d = (result & 0xff00) >>> 8;\n        result = (l | (h << 8)) - 1;\n        l = result & 0xff;\n        h = (result & 0xff00) >>> 8;\n        result = (c | (b << 8)) - 1;\n        c = result & 0xff;\n        b = (result & 0xff00) >>> 8;\n\n        flags.P = (c || b) ? 1 : 0;\n        flags.Y = ((a + read_value) & 0x02) >>> 1;\n        flags.X = ((a + read_value) & 0x08) >>> 3;\n    };\n\n    let do_cpd = function () {\n        var temp_carry = flags.C\n        var read_value = core.mem_read(l | (h << 8))\n        do_cp(read_value);\n        flags.C = temp_carry;\n        flags.Y = ((a - read_value - flags.H) & 0x02) >>> 1;\n        flags.X = ((a - read_value - flags.H) & 0x08) >>> 3;\n\n        var result = (l | (h << 8)) - 1;\n        l = result & 0xff;\n        h = (result & 0xff00) >>> 8;\n        result = (c | (b << 8)) - 1;\n        c = result & 0xff;\n        b = (result & 0xff00) >>> 8;\n\n        flags.P = result ? 1 : 0;\n    };\n\n    let do_ind = function () {\n        b = do_dec(b);\n\n        core.mem_write(l | (h << 8), core.io_read((b << 8) | c));\n\n        var result = (l | (h << 8)) - 1;\n        l = result & 0xff;\n        h = (result & 0xff00) >>> 8;\n\n        flags.N = 1;\n    };\n\n    let do_outd = function () {\n        core.io_write((b << 8) | c, core.mem_read(l | (h << 8)));\n\n        var result = (l | (h << 8)) - 1;\n        l = result & 0xff;\n        h = (result & 0xff00) >>> 8;\n\n        b = do_dec(b);\n        flags.N = 1;\n    };\n\n    let do_rlc = function (operand) {\n        flags.N = 0;\n        flags.H = 0;\n\n        flags.C = (operand & 0x80) >>> 7;\n        operand = ((operand << 1) | flags.C) & 0xff;\n\n        flags.Z = !operand ? 1 : 0;\n        flags.P = get_parity(operand);\n        flags.S = (operand & 0x80) ? 1 : 0;\n        update_xy_flags(operand);\n\n        return operand;\n    };\n\n    let do_rrc = function (operand) {\n        flags.N = 0;\n        flags.H = 0;\n\n        flags.C = operand & 1;\n        operand = ((operand >>> 1) & 0x7f) | (flags.C << 7);\n\n        flags.Z = !(operand & 0xff) ? 1 : 0;\n        flags.P = get_parity(operand);\n        flags.S = (operand & 0x80) ? 1 : 0;\n        update_xy_flags(operand);\n\n        return operand & 0xff;\n    };\n\n    let do_rl = function (operand) {\n        flags.N = 0;\n        flags.H = 0;\n\n        var temp = flags.C;\n        flags.C = (operand & 0x80) >>> 7;\n        operand = ((operand << 1) | temp) & 0xff;\n\n        flags.Z = !operand ? 1 : 0;\n        flags.P = get_parity(operand);\n        flags.S = (operand & 0x80) ? 1 : 0;\n        update_xy_flags(operand);\n\n        return operand;\n    };\n\n    let do_rr = function (operand) {\n        flags.N = 0;\n        flags.H = 0;\n\n        var temp = flags.C;\n        flags.C = operand & 1;\n        operand = ((operand >>> 1) & 0x7f) | (temp << 7);\n\n        flags.Z = !operand ? 1 : 0;\n        flags.P = get_parity(operand);\n        flags.S = (operand & 0x80) ? 1 : 0;\n        update_xy_flags(operand);\n\n        return operand;\n    };\n\n    let do_sla = function (operand) {\n        flags.N = 0;\n        flags.H = 0;\n\n        flags.C = (operand & 0x80) >>> 7;\n        operand = (operand << 1) & 0xff;\n\n        flags.Z = !operand ? 1 : 0;\n        flags.P = get_parity(operand);\n        flags.S = (operand & 0x80) ? 1 : 0;\n        update_xy_flags(operand);\n\n        return operand;\n    };\n\n    let do_sra = function (operand) {\n        flags.N = 0;\n        flags.H = 0;\n\n        flags.C = operand & 1;\n        operand = ((operand >>> 1) & 0x7f) | (operand & 0x80);\n\n        flags.Z = !operand ? 1 : 0;\n        flags.P = get_parity(operand);\n        flags.S = (operand & 0x80) ? 1 : 0;\n        update_xy_flags(operand);\n\n        return operand;\n    };\n\n    let do_sll = function (operand) {\n        flags.N = 0;\n        flags.H = 0;\n\n        flags.C = (operand & 0x80) >>> 7;\n        operand = ((operand << 1) & 0xff) | 1;\n\n        flags.Z = !operand ? 1 : 0;\n        flags.P = get_parity(operand);\n        flags.S = (operand & 0x80) ? 1 : 0;\n        update_xy_flags(operand);\n\n        return operand;\n    };\n\n    let do_srl = function (operand) {\n        flags.N = 0;\n        flags.H = 0;\n\n        flags.C = operand & 1;\n        operand = (operand >>> 1) & 0x7f;\n\n        flags.Z = !operand ? 1 : 0;\n        flags.P = get_parity(operand);\n        flags.S = 0;\n        update_xy_flags(operand);\n\n        return operand;\n    };\n\n    let do_ix_add = function (operand) {\n        flags.N = 0;\n\n        var result = ix + operand;\n\n        flags.C = (result & 0x10000) ? 1 : 0;\n        flags.H = (((ix & 0xfff) + (operand & 0xfff)) & 0x1000) ? 1 : 0;\n        update_xy_flags((result & 0xff00) >>> 8);\n\n        ix = result;\n    };\n\n\n    ///////////////////////////////////////////////////////////////////////////////\n    /// This table contains the implementations for the instructions that weren't\n    ///  implemented directly in the decoder function (everything but the 8-bit\n    ///  register loads and the accumulator ALU instructions, in other words).\n    /// Similar tables for the ED and DD/FD prefixes follow this one.\n    ///////////////////////////////////////////////////////////////////////////////\n    let instructions = [];\n\n    // 0x00 : NOP\n    instructions[0x00] = function () { };\n    // 0x01 : LD BC, nn\n    instructions[0x01] = function () {\n        pc = (pc + 1) & 0xffff;\n        c = core.mem_read(pc);\n        pc = (pc + 1) & 0xffff;\n        b = core.mem_read(pc);\n    };\n    // 0x02 : LD (BC), A\n    instructions[0x02] = function () {\n        core.mem_write(c | (b << 8), a);\n    };\n    // 0x03 : INC BC\n    instructions[0x03] = function () {\n        var result = (c | (b << 8));\n        result += 1;\n        c = result & 0xff;\n        b = (result & 0xff00) >>> 8;\n    };\n    // 0x04 : INC B\n    instructions[0x04] = function () {\n        b = do_inc(b);\n    };\n    // 0x05 : DEC B\n    instructions[0x05] = function () {\n        b = do_dec(b);\n    };\n    // 0x06 : LD B, n\n    instructions[0x06] = function () {\n        pc = (pc + 1) & 0xffff;\n        b = core.mem_read(pc);\n    };\n    // 0x07 : RLCA\n    instructions[0x07] = function () {\n        // This instruction is implemented as a special case of the\n        //  more general Z80-specific RLC instruction.\n        // Specifially, RLCA is a version of RLC A that affects fewer flags.\n        // The same applies to RRCA, RLA, and RRA.\n        var temp_s = flags.S, temp_z = flags.Z, temp_p = flags.P;\n        a = do_rlc(a);\n        flags.S = temp_s;\n        flags.Z = temp_z;\n        flags.P = temp_p;\n    };\n    // 0x08 : EX AF, AF'\n    instructions[0x08] = function () {\n        var temp = a;\n        a = a_prime;\n        a_prime = temp;\n\n        temp = get_flags_register();\n        set_flags_register(get_flags_prime());\n        set_flags_prime(temp);\n    };\n    // 0x09 : ADD HL, BC\n    instructions[0x09] = function () {\n        do_hl_add(c | (b << 8));\n    };\n    // 0x0a : LD A, (BC)\n    instructions[0x0a] = function () {\n        a = core.mem_read(c | (b << 8));\n    };\n    // 0x0b : DEC BC\n    instructions[0x0b] = function () {\n        var result = (c | (b << 8));\n        result -= 1;\n        c = result & 0xff;\n        b = (result & 0xff00) >>> 8;\n    };\n    // 0x0c : INC C\n    instructions[0x0c] = function () {\n        c = do_inc(c);\n    };\n    // 0x0d : DEC C\n    instructions[0x0d] = function () {\n        c = do_dec(c);\n    };\n    // 0x0e : LD C, n\n    instructions[0x0e] = function () {\n        pc = (pc + 1) & 0xffff;\n        c = core.mem_read(pc);\n    };\n    // 0x0f : RRCA\n    instructions[0x0f] = function () {\n        var temp_s = flags.S, temp_z = flags.Z, temp_p = flags.P;\n        a = do_rrc(a);\n        flags.S = temp_s;\n        flags.Z = temp_z;\n        flags.P = temp_p;\n    };\n    // 0x10 : DJNZ nn\n    instructions[0x10] = function () {\n        b = (b - 1) & 0xff;\n        do_conditional_relative_jump(b !== 0);\n    };\n    // 0x11 : LD DE, nn\n    instructions[0x11] = function () {\n        pc = (pc + 1) & 0xffff;\n        e = core.mem_read(pc);\n        pc = (pc + 1) & 0xffff;\n        d = core.mem_read(pc);\n    };\n    // 0x12 : LD (DE), A\n    instructions[0x12] = function () {\n        core.mem_write(e | (d << 8), a);\n    };\n    // 0x13 : INC DE\n    instructions[0x13] = function () {\n        var result = (e | (d << 8));\n        result += 1;\n        e = result & 0xff;\n        d = (result & 0xff00) >>> 8;\n    };\n    // 0x14 : INC D\n    instructions[0x14] = function () {\n        d = do_inc(d);\n    };\n    // 0x15 : DEC D\n    instructions[0x15] = function () {\n        d = do_dec(d);\n    };\n    // 0x16 : LD D, n\n    instructions[0x16] = function () {\n        pc = (pc + 1) & 0xffff;\n        d = core.mem_read(pc);\n    };\n    // 0x17 : RLA\n    instructions[0x17] = function () {\n        var temp_s = flags.S, temp_z = flags.Z, temp_p = flags.P;\n        a = do_rl(a);\n        flags.S = temp_s;\n        flags.Z = temp_z;\n        flags.P = temp_p;\n    };\n    // 0x18 : JR n\n    instructions[0x18] = function () {\n        var offset = get_signed_offset_byte(core.mem_read((pc + 1) & 0xffff));\n        pc = (pc + offset + 1) & 0xffff;\n    };\n    // 0x19 : ADD HL, DE\n    instructions[0x19] = function () {\n        do_hl_add(e | (d << 8));\n    };\n    // 0x1a : LD A, (DE)\n    instructions[0x1a] = function () {\n        a = core.mem_read(e | (d << 8));\n    };\n    // 0x1b : DEC DE\n    instructions[0x1b] = function () {\n        var result = (e | (d << 8));\n        result -= 1;\n        e = result & 0xff;\n        d = (result & 0xff00) >>> 8;\n    };\n    // 0x1c : INC E\n    instructions[0x1c] = function () {\n        e = do_inc(e);\n    };\n    // 0x1d : DEC E\n    instructions[0x1d] = function () {\n        e = do_dec(e);\n    };\n    // 0x1e : LD E, n\n    instructions[0x1e] = function () {\n        pc = (pc + 1) & 0xffff;\n        e = core.mem_read(pc);\n    };\n    // 0x1f : RRA\n    instructions[0x1f] = function () {\n        var temp_s = flags.S, temp_z = flags.Z, temp_p = flags.P;\n        a = do_rr(a);\n        flags.S = temp_s;\n        flags.Z = temp_z;\n        flags.P = temp_p;\n    };\n    // 0x20 : JR NZ, n\n    instructions[0x20] = function () {\n        do_conditional_relative_jump(!flags.Z);\n    };\n    // 0x21 : LD HL, nn\n    instructions[0x21] = function () {\n        pc = (pc + 1) & 0xffff;\n        l = core.mem_read(pc);\n        pc = (pc + 1) & 0xffff;\n        h = core.mem_read(pc);\n    };\n    // 0x22 : LD (nn), HL\n    instructions[0x22] = function () {\n        pc = (pc + 1) & 0xffff;\n        var address = core.mem_read(pc);\n        pc = (pc + 1) & 0xffff;\n        address |= core.mem_read(pc) << 8;\n\n        core.mem_write(address, l);\n        core.mem_write((address + 1) & 0xffff, h);\n    };\n    // 0x23 : INC HL\n    instructions[0x23] = function () {\n        var result = (l | (h << 8));\n        result += 1;\n        l = result & 0xff;\n        h = (result & 0xff00) >>> 8;\n    };\n    // 0x24 : INC H\n    instructions[0x24] = function () {\n        h = do_inc(h);\n    };\n    // 0x25 : DEC H\n    instructions[0x25] = function () {\n        h = do_dec(h);\n    };\n    // 0x26 : LD H, n\n    instructions[0x26] = function () {\n        pc = (pc + 1) & 0xffff;\n        h = core.mem_read(pc);\n    };\n    // 0x27 : DAA\n    instructions[0x27] = function () {\n        var temp = a;\n        if (!flags.N) {\n            if (flags.H || ((a & 0x0f) > 9))\n                temp += 0x06;\n            if (flags.C || (a > 0x99))\n                temp += 0x60;\n        }\n        else {\n            if (flags.H || ((a & 0x0f) > 9))\n                temp -= 0x06;\n            if (flags.C || (a > 0x99))\n                temp -= 0x60;\n        }\n\n        flags.S = (temp & 0x80) ? 1 : 0;\n        flags.Z = !(temp & 0xff) ? 1 : 0;\n        flags.H = ((a & 0x10) ^ (temp & 0x10)) ? 1 : 0;\n        flags.P = get_parity(temp & 0xff);\n        // DAA never clears the carry flag if it was already set,\n        //  but it is able to set the carry flag if it was clear.\n        // Don't ask me, I don't know.\n        // Note also that we check for a BCD carry, instead of the usual.\n        flags.C = (flags.C || (a > 0x99)) ? 1 : 0;\n\n        a = temp & 0xff;\n\n        update_xy_flags(a);\n    };\n    // 0x28 : JR Z, n\n    instructions[0x28] = function () {\n        do_conditional_relative_jump(!!flags.Z);\n    };\n    // 0x29 : ADD HL, HL\n    instructions[0x29] = function () {\n        do_hl_add(l | (h << 8));\n    };\n    // 0x2a : LD HL, (nn)\n    instructions[0x2a] = function () {\n        pc = (pc + 1) & 0xffff;\n        var address = core.mem_read(pc);\n        pc = (pc + 1) & 0xffff;\n        address |= core.mem_read(pc) << 8;\n\n        l = core.mem_read(address);\n        h = core.mem_read((address + 1) & 0xffff);\n    };\n    // 0x2b : DEC HL\n    instructions[0x2b] = function () {\n        var result = (l | (h << 8));\n        result -= 1;\n        l = result & 0xff;\n        h = (result & 0xff00) >>> 8;\n    };\n    // 0x2c : INC L\n    instructions[0x2c] = function () {\n        l = do_inc(l);\n    };\n    // 0x2d : DEC L\n    instructions[0x2d] = function () {\n        l = do_dec(l);\n    };\n    // 0x2e : LD L, n\n    instructions[0x2e] = function () {\n        pc = (pc + 1) & 0xffff;\n        l = core.mem_read(pc);\n    };\n    // 0x2f : CPL\n    instructions[0x2f] = function () {\n        a = (~a) & 0xff;\n        flags.N = 1;\n        flags.H = 1;\n        update_xy_flags(a);\n    };\n    // 0x30 : JR NC, n\n    instructions[0x30] = function () {\n        do_conditional_relative_jump(!flags.C);\n    };\n    // 0x31 : LD SP, nn\n    instructions[0x31] = function () {\n        sp = core.mem_read((pc + 1) & 0xffff) |\n            (core.mem_read((pc + 2) & 0xffff) << 8);\n        pc = (pc + 2) & 0xffff;\n    };\n    // 0x32 : LD (nn), A\n    instructions[0x32] = function () {\n        pc = (pc + 1) & 0xffff;\n        var address = core.mem_read(pc);\n        pc = (pc + 1) & 0xffff;\n        address |= core.mem_read(pc) << 8;\n\n        core.mem_write(address, a);\n    };\n    // 0x33 : INC SP\n    instructions[0x33] = function () {\n        sp = (sp + 1) & 0xffff;\n    };\n    // 0x34 : INC (HL)\n    instructions[0x34] = function () {\n        var address = l | (h << 8);\n        core.mem_write(address, do_inc(core.mem_read(address)));\n    };\n    // 0x35 : DEC (HL)\n    instructions[0x35] = function () {\n        var address = l | (h << 8);\n        core.mem_write(address, do_dec(core.mem_read(address)));\n    };\n    // 0x36 : LD (HL), n\n    instructions[0x36] = function () {\n        pc = (pc + 1) & 0xffff;\n        core.mem_write(l | (h << 8), core.mem_read(pc));\n    };\n    // 0x37 : SCF\n    instructions[0x37] = function () {\n        flags.N = 0;\n        flags.H = 0;\n        flags.C = 1;\n        update_xy_flags(a);\n    };\n    // 0x38 : JR C, n\n    instructions[0x38] = function () {\n        do_conditional_relative_jump(!!flags.C);\n    };\n    // 0x39 : ADD HL, SP\n    instructions[0x39] = function () {\n        do_hl_add(sp);\n    };\n    // 0x3a : LD A, (nn)\n    instructions[0x3a] = function () {\n        pc = (pc + 1) & 0xffff;\n        var address = core.mem_read(pc);\n        pc = (pc + 1) & 0xffff;\n        address |= core.mem_read(pc) << 8;\n\n        a = core.mem_read(address);\n    };\n    // 0x3b : DEC SP\n    instructions[0x3b] = function () {\n        sp = (sp - 1) & 0xffff;\n    };\n    // 0x3c : INC A\n    instructions[0x3c] = function () {\n        a = do_inc(a);\n    };\n    // 0x3d : DEC A\n    instructions[0x3d] = function () {\n        a = do_dec(a);\n    };\n    // 0x3e : LD A, n\n    instructions[0x3e] = function () {\n        a = core.mem_read((pc + 1) & 0xffff);\n        pc = (pc + 1) & 0xffff;\n    };\n    // 0x3f : CCF\n    instructions[0x3f] = function () {\n        flags.N = 0;\n        flags.H = flags.C;\n        flags.C = flags.C ? 0 : 1;\n        update_xy_flags(a);\n    };\n    // 0xc0 : RET NZ\n    instructions[0xc0] = function () {\n        do_conditional_return(!flags.Z);\n    };\n    // 0xc1 : POP BC\n    instructions[0xc1] = function () {\n        var result = pop_word();\n        c = result & 0xff;\n        b = (result & 0xff00) >>> 8;\n    };\n    // 0xc2 : JP NZ, nn\n    instructions[0xc2] = function () {\n        do_conditional_absolute_jump(!flags.Z);\n    };\n    // 0xc3 : JP nn\n    instructions[0xc3] = function () {\n        pc = core.mem_read((pc + 1) & 0xffff) |\n            (core.mem_read((pc + 2) & 0xffff) << 8);\n        pc = (pc - 1) & 0xffff;\n    };\n    // 0xc4 : CALL NZ, nn\n    instructions[0xc4] = function () {\n        do_conditional_call(!flags.Z);\n    };\n    // 0xc5 : PUSH BC\n    instructions[0xc5] = function () {\n        push_word(c | (b << 8));\n    };\n    // 0xc6 : ADD A, n\n    instructions[0xc6] = function () {\n        pc = (pc + 1) & 0xffff;\n        do_add(core.mem_read(pc));\n    };\n    // 0xc7 : RST 00h\n    instructions[0xc7] = function () {\n        do_reset(0x00);\n    };\n    // 0xc8 : RET Z\n    instructions[0xc8] = function () {\n        do_conditional_return(!!flags.Z);\n    };\n    // 0xc9 : RET\n    instructions[0xc9] = function () {\n        pc = (pop_word() - 1) & 0xffff;\n    };\n    // 0xca : JP Z, nn\n    instructions[0xca] = function () {\n        do_conditional_absolute_jump(!!flags.Z);\n    };\n    // 0xcb : CB Prefix\n    instructions[0xcb] = function () {\n        // R is incremented at the start of the second instruction cycle,\n        //  before the instruction actually runs.\n        // The high bit of R is not affected by this increment,\n        //  it can only be changed using the LD R, A instruction.\n        r = (r & 0x80) | (((r & 0x7f) + 1) & 0x7f);\n\n        // We don't have a table for this prefix,\n        //  the instructions are all so uniform that we can directly decode them.\n        pc = (pc + 1) & 0xffff;\n        var opcode = core.mem_read(pc),\n            bit_number = (opcode & 0x38) >>> 3,\n            reg_code = opcode & 0x07;\n\n        if (opcode < 0x40) {\n            // Shift/rotate instructions\n            var op_array = [do_rlc, do_rrc, do_rl, do_rr,\n                do_sla, do_sra, do_sll, do_srl];\n\n            if (reg_code === 0)\n                b = op_array[bit_number](b);\n            else if (reg_code === 1)\n                c = op_array[bit_number](c);\n            else if (reg_code === 2)\n                d = op_array[bit_number](d);\n            else if (reg_code === 3)\n                e = op_array[bit_number](e);\n            else if (reg_code === 4)\n                h = op_array[bit_number](h);\n            else if (reg_code === 5)\n                l = op_array[bit_number](l);\n            else if (reg_code === 6)\n                core.mem_write(l | (h << 8),\n                    op_array[bit_number](core.mem_read(l | (h << 8))));\n            else if (reg_code === 7)\n                a = op_array[bit_number](a);\n        }\n        else if (opcode < 0x80) {\n            // BIT instructions\n            if (reg_code === 0)\n                flags.Z = !(b & (1 << bit_number)) ? 1 : 0;\n            else if (reg_code === 1)\n                flags.Z = !(c & (1 << bit_number)) ? 1 : 0;\n            else if (reg_code === 2)\n                flags.Z = !(d & (1 << bit_number)) ? 1 : 0;\n            else if (reg_code === 3)\n                flags.Z = !(e & (1 << bit_number)) ? 1 : 0;\n            else if (reg_code === 4)\n                flags.Z = !(h & (1 << bit_number)) ? 1 : 0;\n            else if (reg_code === 5)\n                flags.Z = !(l & (1 << bit_number)) ? 1 : 0;\n            else if (reg_code === 6)\n                flags.Z = !((core.mem_read(l | (h << 8))) & (1 << bit_number)) ? 1 : 0;\n            else if (reg_code === 7)\n                flags.Z = !(a & (1 << bit_number)) ? 1 : 0;\n\n            flags.N = 0;\n            flags.H = 1;\n            flags.P = flags.Z;\n            flags.S = ((bit_number === 7) && !flags.Z) ? 1 : 0;\n            // For the BIT n, (HL) instruction, the X and Y flags are obtained\n            //  from what is apparently an internal temporary register used for\n            //  some of the 16-bit arithmetic instructions.\n            // I haven't implemented that register here,\n            //  so for now we'll set X and Y the same way for every BIT opcode,\n            //  which means that they will usually be wrong for BIT n, (HL).\n            flags.Y = ((bit_number === 5) && !flags.Z) ? 1 : 0;\n            flags.X = ((bit_number === 3) && !flags.Z) ? 1 : 0;\n        }\n        else if (opcode < 0xc0) {\n            // RES instructions\n            if (reg_code === 0)\n                b &= (0xff & ~(1 << bit_number));\n            else if (reg_code === 1)\n                c &= (0xff & ~(1 << bit_number));\n            else if (reg_code === 2)\n                d &= (0xff & ~(1 << bit_number));\n            else if (reg_code === 3)\n                e &= (0xff & ~(1 << bit_number));\n            else if (reg_code === 4)\n                h &= (0xff & ~(1 << bit_number));\n            else if (reg_code === 5)\n                l &= (0xff & ~(1 << bit_number));\n            else if (reg_code === 6)\n                core.mem_write(l | (h << 8),\n                    core.mem_read(l | (h << 8)) & ~(1 << bit_number));\n            else if (reg_code === 7)\n                a &= (0xff & ~(1 << bit_number));\n        }\n        else {\n            // SET instructions\n            if (reg_code === 0)\n                b |= (1 << bit_number);\n            else if (reg_code === 1)\n                c |= (1 << bit_number);\n            else if (reg_code === 2)\n                d |= (1 << bit_number);\n            else if (reg_code === 3)\n                e |= (1 << bit_number);\n            else if (reg_code === 4)\n                h |= (1 << bit_number);\n            else if (reg_code === 5)\n                l |= (1 << bit_number);\n            else if (reg_code === 6)\n                core.mem_write(l | (h << 8),\n                    core.mem_read(l | (h << 8)) | (1 << bit_number));\n            else if (reg_code === 7)\n                a |= (1 << bit_number);\n        }\n\n        cycle_counter += cycle_counts_cb[opcode];\n    };\n    // 0xcc : CALL Z, nn\n    instructions[0xcc] = function () {\n        do_conditional_call(!!flags.Z);\n    };\n    // 0xcd : CALL nn\n    instructions[0xcd] = function () {\n        push_word((pc + 3) & 0xffff);\n        pc = core.mem_read((pc + 1) & 0xffff) |\n            (core.mem_read((pc + 2) & 0xffff) << 8);\n        pc = (pc - 1) & 0xffff;\n    };\n    // 0xce : ADC A, n\n    instructions[0xce] = function () {\n        pc = (pc + 1) & 0xffff;\n        do_adc(core.mem_read(pc));\n    };\n    // 0xcf : RST 08h\n    instructions[0xcf] = function () {\n        do_reset(0x08);\n    };\n    // 0xd0 : RET NC\n    instructions[0xd0] = function () {\n        do_conditional_return(!flags.C);\n    };\n    // 0xd1 : POP DE\n    instructions[0xd1] = function () {\n        var result = pop_word();\n        e = result & 0xff;\n        d = (result & 0xff00) >>> 8;\n    };\n    // 0xd2 : JP NC, nn\n    instructions[0xd2] = function () {\n        do_conditional_absolute_jump(!flags.C);\n    };\n    // 0xd3 : OUT (n), A\n    instructions[0xd3] = function () {\n        pc = (pc + 1) & 0xffff;\n        core.io_write((a << 8) | core.mem_read(pc), a);\n    };\n    // 0xd4 : CALL NC, nn\n    instructions[0xd4] = function () {\n        do_conditional_call(!flags.C);\n    };\n    // 0xd5 : PUSH DE\n    instructions[0xd5] = function () {\n        push_word(e | (d << 8));\n    };\n    // 0xd6 : SUB n\n    instructions[0xd6] = function () {\n        pc = (pc + 1) & 0xffff;\n        do_sub(core.mem_read(pc));\n    };\n    // 0xd7 : RST 10h\n    instructions[0xd7] = function () {\n        do_reset(0x10);\n    };\n    // 0xd8 : RET C\n    instructions[0xd8] = function () {\n        do_conditional_return(!!flags.C);\n    };\n    // 0xd9 : EXX\n    instructions[0xd9] = function () {\n        var temp = b;\n        b = b_prime;\n        b_prime = temp;\n        temp = c;\n        c = c_prime;\n        c_prime = temp;\n        temp = d;\n        d = d_prime;\n        d_prime = temp;\n        temp = e;\n        e = e_prime;\n        e_prime = temp;\n        temp = h;\n        h = h_prime;\n        h_prime = temp;\n        temp = l;\n        l = l_prime;\n        l_prime = temp;\n    };\n    // 0xda : JP C, nn\n    instructions[0xda] = function () {\n        do_conditional_absolute_jump(!!flags.C);\n    };\n    // 0xdb : IN A, (n)\n    instructions[0xdb] = function () {\n        pc = (pc + 1) & 0xffff;\n        a = core.io_read((a << 8) | core.mem_read(pc));\n    };\n    // 0xdc : CALL C, nn\n    instructions[0xdc] = function () {\n        do_conditional_call(!!flags.C);\n    };\n    // 0xdd : DD Prefix (IX instructions)\n    instructions[0xdd] = function () {\n        // R is incremented at the start of the second instruction cycle,\n        //  before the instruction actually runs.\n        // The high bit of R is not affected by this increment,\n        //  it can only be changed using the LD R, A instruction.\n        r = (r & 0x80) | (((r & 0x7f) + 1) & 0x7f);\n\n        pc = (pc + 1) & 0xffff;\n        var opcode = core.mem_read(pc),\n            func = dd_instructions[opcode];\n\n        if (func) {\n            //func = func.bind(this);\n            func();\n            cycle_counter += cycle_counts_dd[opcode];\n        }\n        else {\n            // Apparently if a DD opcode doesn't exist,\n            //  it gets treated as an unprefixed opcode.\n            // What we'll do to handle that is just back up the\n            //  program counter, so that this byte gets decoded\n            //  as a normal instruction.\n            pc = (pc - 1) & 0xffff;\n            // And we'll add in the cycle count for a NOP.\n            cycle_counter += cycle_counts[0];\n        }\n    };\n    // 0xde : SBC n\n    instructions[0xde] = function () {\n        pc = (pc + 1) & 0xffff;\n        do_sbc(core.mem_read(pc));\n    };\n    // 0xdf : RST 18h\n    instructions[0xdf] = function () {\n        do_reset(0x18);\n    };\n    // 0xe0 : RET PO\n    instructions[0xe0] = function () {\n        do_conditional_return(!flags.P);\n    };\n    // 0xe1 : POP HL\n    instructions[0xe1] = function () {\n        var result = pop_word();\n        l = result & 0xff;\n        h = (result & 0xff00) >>> 8;\n    };\n    // 0xe2 : JP PO, (nn)\n    instructions[0xe2] = function () {\n        do_conditional_absolute_jump(!flags.P);\n    };\n    // 0xe3 : EX (SP), HL\n    instructions[0xe3] = function () {\n        var temp = core.mem_read(sp);\n        core.mem_write(sp, l);\n        l = temp;\n        temp = core.mem_read((sp + 1) & 0xffff);\n        core.mem_write((sp + 1) & 0xffff, h);\n        h = temp;\n    };\n    // 0xe4 : CALL PO, nn\n    instructions[0xe4] = function () {\n        do_conditional_call(!flags.P);\n    };\n    // 0xe5 : PUSH HL\n    instructions[0xe5] = function () {\n        push_word(l | (h << 8));\n    };\n    // 0xe6 : AND n\n    instructions[0xe6] = function () {\n        pc = (pc + 1) & 0xffff;\n        do_and(core.mem_read(pc));\n    };\n    // 0xe7 : RST 20h\n    instructions[0xe7] = function () {\n        do_reset(0x20);\n    };\n    // 0xe8 : RET PE\n    instructions[0xe8] = function () {\n        do_conditional_return(!!flags.P);\n    };\n    // 0xe9 : JP (HL)\n    instructions[0xe9] = function () {\n        pc = l | (h << 8);\n        pc = (pc - 1) & 0xffff;\n    };\n    // 0xea : JP PE, nn\n    instructions[0xea] = function () {\n        do_conditional_absolute_jump(!!flags.P);\n    };\n    // 0xeb : EX DE, HL\n    instructions[0xeb] = function () {\n        var temp = d;\n        d = h;\n        h = temp;\n        temp = e;\n        e = l;\n        l = temp;\n    };\n    // 0xec : CALL PE, nn\n    instructions[0xec] = function () {\n        do_conditional_call(!!flags.P);\n    };\n    // 0xed : ED Prefix\n    instructions[0xed] = function () {\n        // R is incremented at the start of the second instruction cycle,\n        //  before the instruction actually runs.\n        // The high bit of R is not affected by this increment,\n        //  it can only be changed using the LD R, A instruction.\n        r = (r & 0x80) | (((r & 0x7f) + 1) & 0x7f);\n\n        pc = (pc + 1) & 0xffff;\n        var opcode = core.mem_read(pc),\n            func = ed_instructions[opcode];\n\n        if (func) {\n            //func = func.bind(this);\n            func();\n            cycle_counter += cycle_counts_ed[opcode];\n        }\n        else {\n            // If the opcode didn't exist, the whole thing is a two-byte NOP.\n            cycle_counter += cycle_counts[0];\n        }\n    };\n    // 0xee : XOR n\n    instructions[0xee] = function () {\n        pc = (pc + 1) & 0xffff;\n        do_xor(core.mem_read(pc));\n    };\n    // 0xef : RST 28h\n    instructions[0xef] = function () {\n        do_reset(0x28);\n    };\n    // 0xf0 : RET P\n    instructions[0xf0] = function () {\n        do_conditional_return(!flags.S);\n    };\n    // 0xf1 : POP AF\n    instructions[0xf1] = function () {\n        var result = pop_word();\n        set_flags_register(result & 0xff);\n        a = (result & 0xff00) >>> 8;\n    };\n    // 0xf2 : JP P, nn\n    instructions[0xf2] = function () {\n        do_conditional_absolute_jump(!flags.S);\n    };\n    // 0xf3 : DI\n    instructions[0xf3] = function () {\n        // DI doesn't actually take effect until after the next instruction.\n        do_delayed_di = true;\n    };\n    // 0xf4 : CALL P, nn\n    instructions[0xf4] = function () {\n        do_conditional_call(!flags.S);\n    };\n    // 0xf5 : PUSH AF\n    instructions[0xf5] = function () {\n        push_word(get_flags_register() | (a << 8));\n    };\n    // 0xf6 : OR n\n    instructions[0xf6] = function () {\n        pc = (pc + 1) & 0xffff;\n        do_or(core.mem_read(pc));\n    };\n    // 0xf7 : RST 30h\n    instructions[0xf7] = function () {\n        do_reset(0x30);\n    };\n    // 0xf8 : RET M\n    instructions[0xf8] = function () {\n        do_conditional_return(!!flags.S);\n    };\n    // 0xf9 : LD SP, HL\n    instructions[0xf9] = function () {\n        sp = l | (h << 8);\n    };\n    // 0xfa : JP M, nn\n    instructions[0xfa] = function () {\n        do_conditional_absolute_jump(!!flags.S);\n    };\n    // 0xfb : EI\n    instructions[0xfb] = function () {\n        // EI doesn't actually take effect until after the next instruction.\n        do_delayed_ei = true;\n    };\n    // 0xfc : CALL M, nn\n    instructions[0xfc] = function () {\n        do_conditional_call(!!flags.S);\n    };\n    // 0xfd : FD Prefix (IY instructions)\n    instructions[0xfd] = function () {\n        // R is incremented at the start of the second instruction cycle,\n        //  before the instruction actually runs.\n        // The high bit of R is not affected by this increment,\n        //  it can only be changed using the LD R, A instruction.\n        r = (r & 0x80) | (((r & 0x7f) + 1) & 0x7f);\n\n        pc = (pc + 1) & 0xffff;\n        var opcode = core.mem_read(pc),\n            func = dd_instructions[opcode];\n\n        if (func) {\n            // Rather than copy and paste all the IX instructions into IY instructions,\n            //  what we'll do is sneakily copy IY into IX, run the IX instruction,\n            //  and then copy the result into IY and restore the old IX.\n            var temp = ix;\n            ix = iy;\n            //func = func.bind(this);\n            func();\n            iy = ix;\n            ix = temp;\n\n            cycle_counter += cycle_counts_dd[opcode];\n        }\n        else {\n            // Apparently if an FD opcode doesn't exist,\n            //  it gets treated as an unprefixed opcode.\n            // What we'll do to handle that is just back up the\n            //  program counter, so that this byte gets decoded\n            //  as a normal instruction.\n            pc = (pc - 1) & 0xffff;\n            // And we'll add in the cycle count for a NOP.\n            cycle_counter += cycle_counts[0];\n        }\n    };\n    // 0xfe : CP n\n    instructions[0xfe] = function () {\n        pc = (pc + 1) & 0xffff;\n        do_cp(core.mem_read(pc));\n    };\n    // 0xff : RST 38h\n    instructions[0xff] = function () {\n        do_reset(0x38);\n    };\n\n\n    ///////////////////////////////////////////////////////////////////////////////\n    /// This table of ED opcodes is pretty sparse;\n    ///  there are not very many valid ED-prefixed opcodes in the Z80,\n    ///  and many of the ones that are valid are not documented.\n    ///////////////////////////////////////////////////////////////////////////////\n    let ed_instructions = [];\n    // 0x40 : IN B, (C)\n    ed_instructions[0x40] = function () {\n        b = do_in((b << 8) | c);\n    };\n    // 0x41 : OUT (C), B\n    ed_instructions[0x41] = function () {\n        core.io_write((b << 8) | c, b);\n    };\n    // 0x42 : SBC HL, BC\n    ed_instructions[0x42] = function () {\n        do_hl_sbc(c | (b << 8));\n    };\n    // 0x43 : LD (nn), BC\n    ed_instructions[0x43] = function () {\n        pc = (pc + 1) & 0xffff;\n        var address = core.mem_read(pc);\n        pc = (pc + 1) & 0xffff;\n        address |= core.mem_read(pc) << 8;\n\n        core.mem_write(address, c);\n        core.mem_write((address + 1) & 0xffff, b);\n    };\n    // 0x44 : NEG\n    ed_instructions[0x44] = function () {\n        do_neg();\n    };\n    // 0x45 : RETN\n    ed_instructions[0x45] = function () {\n        pc = (pop_word() - 1) & 0xffff;\n        iff1 = iff2;\n    };\n    // 0x46 : IM 0\n    ed_instructions[0x46] = function () {\n        imode = 0;\n    };\n    // 0x47 : LD I, A\n    ed_instructions[0x47] = function () {\n        i = a\n    };\n    // 0x48 : IN C, (C)\n    ed_instructions[0x48] = function () {\n        c = do_in((b << 8) | c);\n    };\n    // 0x49 : OUT (C), C\n    ed_instructions[0x49] = function () {\n        core.io_write((b << 8) | c, c);\n    };\n    // 0x4a : ADC HL, BC\n    ed_instructions[0x4a] = function () {\n        do_hl_adc(c | (b << 8));\n    };\n    // 0x4b : LD BC, (nn)\n    ed_instructions[0x4b] = function () {\n        pc = (pc + 1) & 0xffff;\n        var address = core.mem_read(pc);\n        pc = (pc + 1) & 0xffff;\n        address |= core.mem_read(pc) << 8;\n\n        c = core.mem_read(address);\n        b = core.mem_read((address + 1) & 0xffff);\n    };\n    // 0x4c : NEG (Undocumented)\n    ed_instructions[0x4c] = function () {\n        do_neg();\n    };\n    // 0x4d : RETI\n    ed_instructions[0x4d] = function () {\n        pc = (pop_word() - 1) & 0xffff;\n    };\n    // 0x4e : IM 0 (Undocumented)\n    ed_instructions[0x4e] = function () {\n        imode = 0;\n    };\n    // 0x4f : LD R, A\n    ed_instructions[0x4f] = function () {\n        r = a;\n    };\n    // 0x50 : IN D, (C)\n    ed_instructions[0x50] = function () {\n        d = do_in((b << 8) | c);\n    };\n    // 0x51 : OUT (C), D\n    ed_instructions[0x51] = function () {\n        core.io_write((b << 8) | c, d);\n    };\n    // 0x52 : SBC HL, DE\n    ed_instructions[0x52] = function () {\n        do_hl_sbc(e | (d << 8));\n    };\n    // 0x53 : LD (nn), DE\n    ed_instructions[0x53] = function () {\n        pc = (pc + 1) & 0xffff;\n        var address = core.mem_read(pc);\n        pc = (pc + 1) & 0xffff;\n        address |= core.mem_read(pc) << 8;\n\n        core.mem_write(address, e);\n        core.mem_write((address + 1) & 0xffff, d);\n    };\n    // 0x54 : NEG (Undocumented)\n    ed_instructions[0x54] = function () {\n        do_neg();\n    };\n    // 0x55 : RETN\n    ed_instructions[0x55] = function () {\n        pc = (pop_word() - 1) & 0xffff;\n        iff1 = iff2;\n    };\n    // 0x56 : IM 1\n    ed_instructions[0x56] = function () {\n        imode = 1;\n    };\n    // 0x57 : LD A, I\n    ed_instructions[0x57] = function () {\n        a = i;\n        flags.S = i & 0x80 ? 1 : 0;\n        flags.Z = i ? 0 : 1;\n        flags.H = 0;\n        flags.P = iff2;\n        flags.N = 0;\n    };\n    // 0x58 : IN E, (C)\n    ed_instructions[0x58] = function () {\n        e = do_in((b << 8) | c);\n    };\n    // 0x59 : OUT (C), E\n    ed_instructions[0x59] = function () {\n        core.io_write((b << 8) | c, e);\n    };\n    // 0x5a : ADC HL, DE\n    ed_instructions[0x5a] = function () {\n        do_hl_adc(e | (d << 8));\n    };\n    // 0x5b : LD DE, (nn)\n    ed_instructions[0x5b] = function () {\n        pc = (pc + 1) & 0xffff;\n        var address = core.mem_read(pc);\n        pc = (pc + 1) & 0xffff;\n        address |= core.mem_read(pc) << 8;\n\n        e = core.mem_read(address);\n        d = core.mem_read((address + 1) & 0xffff);\n    };\n    // 0x5c : NEG (Undocumented)\n    ed_instructions[0x5c] = function () {\n        do_neg();\n    };\n    // 0x5d : RETN\n    ed_instructions[0x5d] = function () {\n        pc = (pop_word() - 1) & 0xffff;\n        iff1 = iff2;\n    };\n    // 0x5e : IM 2\n    ed_instructions[0x5e] = function () {\n        imode = 2;\n    };\n    // 0x5f : LD A, R\n    ed_instructions[0x5f] = function () {\n        a = r;\n        flags.P = iff2;\n    };\n    // 0x60 : IN H, (C)\n    ed_instructions[0x60] = function () {\n        h = do_in((b << 8) | c);\n    };\n    // 0x61 : OUT (C), H\n    ed_instructions[0x61] = function () {\n        core.io_write((b << 8) | c, h);\n    };\n    // 0x62 : SBC HL, HL\n    ed_instructions[0x62] = function () {\n        do_hl_sbc(l | (h << 8));\n    };\n    // 0x63 : LD (nn), HL (Undocumented)\n    ed_instructions[0x63] = function () {\n        pc = (pc + 1) & 0xffff;\n        var address = core.mem_read(pc);\n        pc = (pc + 1) & 0xffff;\n        address |= core.mem_read(pc) << 8;\n\n        core.mem_write(address, l);\n        core.mem_write((address + 1) & 0xffff, h);\n    };\n    // 0x64 : NEG (Undocumented)\n    ed_instructions[0x64] = function () {\n        do_neg();\n    };\n    // 0x65 : RETN\n    ed_instructions[0x65] = function () {\n        pc = (pop_word() - 1) & 0xffff;\n        iff1 = iff2;\n    };\n    // 0x66 : IM 0\n    ed_instructions[0x66] = function () {\n        imode = 0;\n    };\n    // 0x67 : RRD\n    ed_instructions[0x67] = function () {\n        var hl_value = core.mem_read(l | (h << 8));\n        var temp1 = hl_value & 0x0f, temp2 = a & 0x0f;\n        hl_value = ((hl_value & 0xf0) >>> 4) | (temp2 << 4);\n        a = (a & 0xf0) | temp1;\n        core.mem_write(l | (h << 8), hl_value);\n\n        flags.S = (a & 0x80) ? 1 : 0;\n        flags.Z = a ? 0 : 1;\n        flags.H = 0;\n        flags.P = get_parity(a) ? 1 : 0;\n        flags.N = 0;\n        update_xy_flags(a);\n    };\n    // 0x68 : IN L, (C)\n    ed_instructions[0x68] = function () {\n        l = do_in((b << 8) | c);\n    };\n    // 0x69 : OUT (C), L\n    ed_instructions[0x69] = function () {\n        core.io_write((b << 8) | c, l);\n    };\n    // 0x6a : ADC HL, HL\n    ed_instructions[0x6a] = function () {\n        do_hl_adc(l | (h << 8));\n    };\n    // 0x6b : LD HL, (nn) (Undocumented)\n    ed_instructions[0x6b] = function () {\n        pc = (pc + 1) & 0xffff;\n        var address = core.mem_read(pc);\n        pc = (pc + 1) & 0xffff;\n        address |= core.mem_read(pc) << 8;\n\n        l = core.mem_read(address);\n        h = core.mem_read((address + 1) & 0xffff);\n    };\n    // 0x6c : NEG (Undocumented)\n    ed_instructions[0x6c] = function () {\n        do_neg();\n    };\n    // 0x6d : RETN\n    ed_instructions[0x6d] = function () {\n        pc = (pop_word() - 1) & 0xffff;\n        iff1 = iff2;\n    };\n    // 0x6e : IM 0 (Undocumented)\n    ed_instructions[0x6e] = function () {\n        imode = 0;\n    };\n    // 0x6f : RLD\n    ed_instructions[0x6f] = function () {\n        var hl_value = core.mem_read(l | (h << 8));\n        var temp1 = hl_value & 0xf0, temp2 = a & 0x0f;\n        hl_value = ((hl_value & 0x0f) << 4) | temp2;\n        a = (a & 0xf0) | (temp1 >>> 4);\n        core.mem_write(l | (h << 8), hl_value);\n\n        flags.S = (a & 0x80) ? 1 : 0;\n        flags.Z = a ? 0 : 1;\n        flags.H = 0;\n        flags.P = get_parity(a) ? 1 : 0;\n        flags.N = 0;\n        update_xy_flags(a);\n    };\n    // 0x70 : IN (C) (Undocumented)\n    ed_instructions[0x70] = function () {\n        do_in((b << 8) | c);\n    };\n    // 0x71 : OUT (C), 0 (Undocumented)\n    ed_instructions[0x71] = function () {\n        core.io_write((b << 8) | c, 0);\n    };\n    // 0x72 : SBC HL, SP\n    ed_instructions[0x72] = function () {\n        do_hl_sbc(sp);\n    };\n    // 0x73 : LD (nn), SP\n    ed_instructions[0x73] = function () {\n        pc = (pc + 1) & 0xffff;\n        var address = core.mem_read(pc);\n        pc = (pc + 1) & 0xffff;\n        address |= core.mem_read(pc) << 8;\n\n        core.mem_write(address, sp & 0xff);\n        core.mem_write((address + 1) & 0xffff, (sp >>> 8) & 0xff);\n    };\n    // 0x74 : NEG (Undocumented)\n    ed_instructions[0x74] = function () {\n        do_neg();\n    };\n    // 0x75 : RETN\n    ed_instructions[0x75] = function () {\n        pc = (pop_word() - 1) & 0xffff;\n        iff1 = iff2;\n    };\n    // 0x76 : IM 1\n    ed_instructions[0x76] = function () {\n        imode = 1;\n    };\n    // 0x78 : IN A, (C)\n    ed_instructions[0x78] = function () {\n        a = do_in((b << 8) | c);\n    };\n    // 0x79 : OUT (C), A\n    ed_instructions[0x79] = function () {\n        core.io_write((b << 8) | c, a);\n    };\n    // 0x7a : ADC HL, SP\n    ed_instructions[0x7a] = function () {\n        do_hl_adc(sp);\n    };\n    // 0x7b : LD SP, (nn)\n    ed_instructions[0x7b] = function () {\n        pc = (pc + 1) & 0xffff;\n        var address = core.mem_read(pc);\n        pc = (pc + 1) & 0xffff;\n        address |= core.mem_read(pc) << 8;\n\n        sp = core.mem_read(address);\n        sp |= core.mem_read((address + 1) & 0xffff) << 8;\n    };\n    // 0x7c : NEG (Undocumented)\n    ed_instructions[0x7c] = function () {\n        do_neg();\n    };\n    // 0x7d : RETN\n    ed_instructions[0x7d] = function () {\n        pc = (pop_word() - 1) & 0xffff;\n        iff1 = iff2;\n    };\n    // 0x7e : IM 2\n    ed_instructions[0x7e] = function () {\n        imode = 2;\n    };\n    // 0xa0 : LDI\n    ed_instructions[0xa0] = function () {\n        do_ldi();\n    };\n    // 0xa1 : CPI\n    ed_instructions[0xa1] = function () {\n        do_cpi();\n    };\n    // 0xa2 : INI\n    ed_instructions[0xa2] = function () {\n        do_ini();\n    };\n    // 0xa3 : OUTI\n    ed_instructions[0xa3] = function () {\n        do_outi();\n    };\n    // 0xa8 : LDD\n    ed_instructions[0xa8] = function () {\n        do_ldd();\n    };\n    // 0xa9 : CPD\n    ed_instructions[0xa9] = function () {\n        do_cpd();\n    };\n    // 0xaa : IND\n    ed_instructions[0xaa] = function () {\n        do_ind();\n    };\n    // 0xab : OUTD\n    ed_instructions[0xab] = function () {\n        do_outd();\n    };\n    // 0xb0 : LDIR\n    ed_instructions[0xb0] = function () {\n        do_ldi();\n        if (b || c) {\n            cycle_counter += 5;\n            pc = (pc - 2) & 0xffff;\n        }\n    };\n    // 0xb1 : CPIR\n    ed_instructions[0xb1] = function () {\n        do_cpi();\n        if (!flags.Z && (b || c)) {\n            cycle_counter += 5;\n            pc = (pc - 2) & 0xffff;\n        }\n    };\n    // 0xb2 : INIR\n    ed_instructions[0xb2] = function () {\n        do_ini();\n        if (b) {\n            cycle_counter += 5;\n            pc = (pc - 2) & 0xffff;\n        }\n    };\n    // 0xb3 : OTIR\n    ed_instructions[0xb3] = function () {\n        do_outi();\n        if (b) {\n            cycle_counter += 5;\n            pc = (pc - 2) & 0xffff;\n        }\n    };\n    // 0xb8 : LDDR\n    ed_instructions[0xb8] = function () {\n        do_ldd();\n        if (b || c) {\n            cycle_counter += 5;\n            pc = (pc - 2) & 0xffff;\n        }\n    };\n    // 0xb9 : CPDR\n    ed_instructions[0xb9] = function () {\n        do_cpd();\n        if (!flags.Z && (b || c)) {\n            cycle_counter += 5;\n            pc = (pc - 2) & 0xffff;\n        }\n    };\n    // 0xba : INDR\n    ed_instructions[0xba] = function () {\n        do_ind();\n        if (b) {\n            cycle_counter += 5;\n            pc = (pc - 2) & 0xffff;\n        }\n    };\n    // 0xbb : OTDR\n    ed_instructions[0xbb] = function () {\n        do_outd();\n        if (b) {\n            cycle_counter += 5;\n            pc = (pc - 2) & 0xffff;\n        }\n    };\n\n\n    ///////////////////////////////////////////////////////////////////////////////\n    /// Like ED, this table is quite sparse,\n    ///  and many of the opcodes here are also undocumented.\n    /// The undocumented instructions here are those that deal with only one byte\n    ///  of the two-byte IX register; the bytes are designed IXH and IXL here.\n    ///////////////////////////////////////////////////////////////////////////////\n    let dd_instructions = [];\n    // 0x09 : ADD IX, BC\n    dd_instructions[0x09] = function () {\n        do_ix_add(c | (b << 8));\n    };\n    // 0x19 : ADD IX, DE\n    dd_instructions[0x19] = function () {\n        do_ix_add(e | (d << 8));\n    };\n    // 0x21 : LD IX, nn\n    dd_instructions[0x21] = function () {\n        pc = (pc + 1) & 0xffff;\n        ix = core.mem_read(pc);\n        pc = (pc + 1) & 0xffff;\n        ix |= (core.mem_read(pc) << 8);\n    };\n    // 0x22 : LD (nn), IX\n    dd_instructions[0x22] = function () {\n        pc = (pc + 1) & 0xffff;\n        var address = core.mem_read(pc);\n        pc = (pc + 1) & 0xffff;\n        address |= (core.mem_read(pc) << 8);\n\n        core.mem_write(address, ix & 0xff);\n        core.mem_write((address + 1) & 0xffff, (ix >>> 8) & 0xff);\n    };\n    // 0x23 : INC IX\n    dd_instructions[0x23] = function () {\n        ix = (ix + 1) & 0xffff;\n    };\n    // 0x24 : INC IXH (Undocumented)\n    dd_instructions[0x24] = function () {\n        ix = (do_inc(ix >>> 8) << 8) | (ix & 0xff);\n    };\n    // 0x25 : DEC IXH (Undocumented)\n    dd_instructions[0x25] = function () {\n        ix = (do_dec(ix >>> 8) << 8) | (ix & 0xff);\n    };\n    // 0x26 : LD IXH, n (Undocumented)\n    dd_instructions[0x26] = function () {\n        pc = (pc + 1) & 0xffff;\n        ix = (core.mem_read(pc) << 8) | (ix & 0xff);\n    };\n    // 0x29 : ADD IX, IX\n    dd_instructions[0x29] = function () {\n        do_ix_add(ix);\n    };\n    // 0x2a : LD IX, (nn)\n    dd_instructions[0x2a] = function () {\n        pc = (pc + 1) & 0xffff;\n        var address = core.mem_read(pc);\n        pc = (pc + 1) & 0xffff;\n        address |= (core.mem_read(pc) << 8);\n\n        ix = core.mem_read(address);\n        ix |= (core.mem_read((address + 1) & 0xffff) << 8);\n    };\n    // 0x2b : DEC IX\n    dd_instructions[0x2b] = function () {\n        ix = (ix - 1) & 0xffff;\n    };\n    // 0x2c : INC IXL (Undocumented)\n    dd_instructions[0x2c] = function () {\n        ix = do_inc(ix & 0xff) | (ix & 0xff00);\n    };\n    // 0x2d : DEC IXL (Undocumented)\n    dd_instructions[0x2d] = function () {\n        ix = do_dec(ix & 0xff) | (ix & 0xff00);\n    };\n    // 0x2e : LD IXL, n (Undocumented)\n    dd_instructions[0x2e] = function () {\n        pc = (pc + 1) & 0xffff;\n        ix = (core.mem_read(pc) & 0xff) | (ix & 0xff00);\n    };\n    // 0x34 : INC (IX+n)\n    dd_instructions[0x34] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc)),\n            value = core.mem_read((offset + ix) & 0xffff);\n        core.mem_write((offset + ix) & 0xffff, do_inc(value));\n    };\n    // 0x35 : DEC (IX+n)\n    dd_instructions[0x35] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc)),\n            value = core.mem_read((offset + ix) & 0xffff);\n        core.mem_write((offset + ix) & 0xffff, do_dec(value));\n    };\n    // 0x36 : LD (IX+n), n\n    dd_instructions[0x36] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        pc = (pc + 1) & 0xffff;\n        core.mem_write((ix + offset) & 0xffff, core.mem_read(pc));\n    };\n    // 0x39 : ADD IX, SP\n    dd_instructions[0x39] = function () {\n        do_ix_add(sp);\n    };\n    // 0x44 : LD B, IXH (Undocumented)\n    dd_instructions[0x44] = function () {\n        b = (ix >>> 8) & 0xff;\n    };\n    // 0x45 : LD B, IXL (Undocumented)\n    dd_instructions[0x45] = function () {\n        b = ix & 0xff;\n    };\n    // 0x46 : LD B, (IX+n)\n    dd_instructions[0x46] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        b = core.mem_read((ix + offset) & 0xffff);\n    };\n    // 0x4c : LD C, IXH (Undocumented)\n    dd_instructions[0x4c] = function () {\n        c = (ix >>> 8) & 0xff;\n    };\n    // 0x4d : LD C, IXL (Undocumented)\n    dd_instructions[0x4d] = function () {\n        c = ix & 0xff;\n    };\n    // 0x4e : LD C, (IX+n)\n    dd_instructions[0x4e] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        c = core.mem_read((ix + offset) & 0xffff);\n    };\n    // 0x54 : LD D, IXH (Undocumented)\n    dd_instructions[0x54] = function () {\n        d = (ix >>> 8) & 0xff;\n    };\n    // 0x55 : LD D, IXL (Undocumented)\n    dd_instructions[0x55] = function () {\n        d = ix & 0xff;\n    };\n    // 0x56 : LD D, (IX+n)\n    dd_instructions[0x56] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        d = core.mem_read((ix + offset) & 0xffff);\n    };\n    // 0x5c : LD E, IXH (Undocumented)\n    dd_instructions[0x5c] = function () {\n        e = (ix >>> 8) & 0xff;\n    };\n    // 0x5d : LD E, IXL (Undocumented)\n    dd_instructions[0x5d] = function () {\n        e = ix & 0xff;\n    };\n    // 0x5e : LD E, (IX+n)\n    dd_instructions[0x5e] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        e = core.mem_read((ix + offset) & 0xffff);\n    };\n    // 0x60 : LD IXH, B (Undocumented)\n    dd_instructions[0x60] = function () {\n        ix = (ix & 0xff) | (b << 8);\n    };\n    // 0x61 : LD IXH, C (Undocumented)\n    dd_instructions[0x61] = function () {\n        ix = (ix & 0xff) | (c << 8);\n    };\n    // 0x62 : LD IXH, D (Undocumented)\n    dd_instructions[0x62] = function () {\n        ix = (ix & 0xff) | (d << 8);\n    };\n    // 0x63 : LD IXH, E (Undocumented)\n    dd_instructions[0x63] = function () {\n        ix = (ix & 0xff) | (e << 8);\n    };\n    // 0x64 : LD IXH, IXH (Undocumented)\n    dd_instructions[0x64] = function () {\n        // No-op.\n    };\n    // 0x65 : LD IXH, IXL (Undocumented)\n    dd_instructions[0x65] = function () {\n        ix = (ix & 0xff) | ((ix & 0xff) << 8);\n    };\n    // 0x66 : LD H, (IX+n)\n    dd_instructions[0x66] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        h = core.mem_read((ix + offset) & 0xffff);\n    };\n    // 0x67 : LD IXH, A (Undocumented)\n    dd_instructions[0x67] = function () {\n        ix = (ix & 0xff) | (a << 8);\n    };\n    // 0x68 : LD IXL, B (Undocumented)\n    dd_instructions[0x68] = function () {\n        ix = (ix & 0xff00) | b;\n    };\n    // 0x69 : LD IXL, C (Undocumented)\n    dd_instructions[0x69] = function () {\n        ix = (ix & 0xff00) | c;\n    };\n    // 0x6a : LD IXL, D (Undocumented)\n    dd_instructions[0x6a] = function () {\n        ix = (ix & 0xff00) | d;\n    };\n    // 0x6b : LD IXL, E (Undocumented)\n    dd_instructions[0x6b] = function () {\n        ix = (ix & 0xff00) | e;\n    };\n    // 0x6c : LD IXL, IXH (Undocumented)\n    dd_instructions[0x6c] = function () {\n        ix = (ix & 0xff00) | (ix >>> 8);\n    };\n    // 0x6d : LD IXL, IXL (Undocumented)\n    dd_instructions[0x6d] = function () {\n        // No-op.\n    };\n    // 0x6e : LD L, (IX+n)\n    dd_instructions[0x6e] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        l = core.mem_read((ix + offset) & 0xffff);\n    };\n    // 0x6f : LD IXL, A (Undocumented)\n    dd_instructions[0x6f] = function () {\n        ix = (ix & 0xff00) | a;\n    };\n    // 0x70 : LD (IX+n), B\n    dd_instructions[0x70] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        core.mem_write((ix + offset) & 0xffff, b);\n    };\n    // 0x71 : LD (IX+n), C\n    dd_instructions[0x71] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        core.mem_write((ix + offset) & 0xffff, c);\n    };\n    // 0x72 : LD (IX+n), D\n    dd_instructions[0x72] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        core.mem_write((ix + offset) & 0xffff, d);\n    };\n    // 0x73 : LD (IX+n), E\n    dd_instructions[0x73] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        core.mem_write((ix + offset) & 0xffff, e);\n    };\n    // 0x74 : LD (IX+n), H\n    dd_instructions[0x74] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        core.mem_write((ix + offset) & 0xffff, h);\n    };\n    // 0x75 : LD (IX+n), L\n    dd_instructions[0x75] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        core.mem_write((ix + offset) & 0xffff, l);\n    };\n    // 0x77 : LD (IX+n), A\n    dd_instructions[0x77] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        core.mem_write((ix + offset) & 0xffff, a);\n    };\n    // 0x7c : LD A, IXH (Undocumented)\n    dd_instructions[0x7c] = function () {\n        a = (ix >>> 8) & 0xff;\n    };\n    // 0x7d : LD A, IXL (Undocumented)\n    dd_instructions[0x7d] = function () {\n        a = ix & 0xff;\n    };\n    // 0x7e : LD A, (IX+n)\n    dd_instructions[0x7e] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        a = core.mem_read((ix + offset) & 0xffff);\n    };\n    // 0x84 : ADD A, IXH (Undocumented)\n    dd_instructions[0x84] = function () {\n        do_add((ix >>> 8) & 0xff);\n    };\n    // 0x85 : ADD A, IXL (Undocumented)\n    dd_instructions[0x85] = function () {\n        do_add(ix & 0xff);\n    };\n    // 0x86 : ADD A, (IX+n)\n    dd_instructions[0x86] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        do_add(core.mem_read((ix + offset) & 0xffff));\n    };\n    // 0x8c : ADC A, IXH (Undocumented)\n    dd_instructions[0x8c] = function () {\n        do_adc((ix >>> 8) & 0xff);\n    };\n    // 0x8d : ADC A, IXL (Undocumented)\n    dd_instructions[0x8d] = function () {\n        do_adc(ix & 0xff);\n    };\n    // 0x8e : ADC A, (IX+n)\n    dd_instructions[0x8e] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        do_adc(core.mem_read((ix + offset) & 0xffff));\n    };\n    // 0x94 : SUB IXH (Undocumented)\n    dd_instructions[0x94] = function () {\n        do_sub((ix >>> 8) & 0xff);\n    };\n    // 0x95 : SUB IXL (Undocumented)\n    dd_instructions[0x95] = function () {\n        do_sub(ix & 0xff);\n    };\n    // 0x96 : SUB A, (IX+n)\n    dd_instructions[0x96] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        do_sub(core.mem_read((ix + offset) & 0xffff));\n    };\n    // 0x9c : SBC IXH (Undocumented)\n    dd_instructions[0x9c] = function () {\n        do_sbc((ix >>> 8) & 0xff);\n    };\n    // 0x9d : SBC IXL (Undocumented)\n    dd_instructions[0x9d] = function () {\n        do_sbc(ix & 0xff);\n    };\n    // 0x9e : SBC A, (IX+n)\n    dd_instructions[0x9e] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        do_sbc(core.mem_read((ix + offset) & 0xffff));\n    };\n    // 0xa4 : AND IXH (Undocumented)\n    dd_instructions[0xa4] = function () {\n        do_and((ix >>> 8) & 0xff);\n    };\n    // 0xa5 : AND IXL (Undocumented)\n    dd_instructions[0xa5] = function () {\n        do_and(ix & 0xff);\n    };\n    // 0xa6 : AND A, (IX+n)\n    dd_instructions[0xa6] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        do_and(core.mem_read((ix + offset) & 0xffff));\n    };\n    // 0xac : XOR IXH (Undocumented)\n    dd_instructions[0xac] = function () {\n        do_xor((ix >>> 8) & 0xff);\n    };\n    // 0xad : XOR IXL (Undocumented)\n    dd_instructions[0xad] = function () {\n        do_xor(ix & 0xff);\n    };\n    // 0xae : XOR A, (IX+n)\n    dd_instructions[0xae] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        do_xor(core.mem_read((ix + offset) & 0xffff));\n    };\n    // 0xb4 : OR IXH (Undocumented)\n    dd_instructions[0xb4] = function () {\n        do_or((ix >>> 8) & 0xff);\n    };\n    // 0xb5 : OR IXL (Undocumented)\n    dd_instructions[0xb5] = function () {\n        do_or(ix & 0xff);\n    };\n    // 0xb6 : OR A, (IX+n)\n    dd_instructions[0xb6] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        do_or(core.mem_read((ix + offset) & 0xffff));\n    };\n    // 0xbc : CP IXH (Undocumented)\n    dd_instructions[0xbc] = function () {\n        do_cp((ix >>> 8) & 0xff);\n    };\n    // 0xbd : CP IXL (Undocumented)\n    dd_instructions[0xbd] = function () {\n        do_cp(ix & 0xff);\n    };\n    // 0xbe : CP A, (IX+n)\n    dd_instructions[0xbe] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        do_cp(core.mem_read((ix + offset) & 0xffff));\n    };\n    // 0xcb : CB Prefix (IX bit instructions)\n    dd_instructions[0xcb] = function () {\n        pc = (pc + 1) & 0xffff;\n        var offset = get_signed_offset_byte(core.mem_read(pc));\n        pc = (pc + 1) & 0xffff;\n        var opcode = core.mem_read(pc), value;\n\n        // As with the \"normal\" CB prefix, we implement the DDCB prefix\n        //  by decoding the opcode directly, rather than using a table.\n        if (opcode < 0x40) {\n            // Shift and rotate instructions.\n            var ddcb_functions = [do_rlc, do_rrc, do_rl, do_rr,\n                do_sla, do_sra, do_sll, do_srl];\n\n            // Most of the opcodes in this range are not valid,\n            //  so we map this opcode onto one of the ones that is.\n            var func = ddcb_functions[(opcode & 0x38) >>> 3],\n                value = func(core.mem_read((ix + offset) & 0xffff));\n\n            core.mem_write((ix + offset) & 0xffff, value);\n        }\n        else {\n            var bit_number = (opcode & 0x38) >>> 3;\n\n            if (opcode < 0x80) {\n                // BIT\n                flags.N = 0;\n                flags.H = 1;\n                flags.Z = !(core.mem_read((ix + offset) & 0xffff) & (1 << bit_number)) ? 1 : 0;\n                flags.P = flags.Z;\n                flags.S = ((bit_number === 7) && !flags.Z) ? 1 : 0;\n            }\n            else if (opcode < 0xc0) {\n                // RES\n                value = core.mem_read((ix + offset) & 0xffff) & ~(1 << bit_number) & 0xff;\n                core.mem_write((ix + offset) & 0xffff, value);\n            }\n            else {\n                // SET\n                value = core.mem_read((ix + offset) & 0xffff) | (1 << bit_number);\n                core.mem_write((ix + offset) & 0xffff, value);\n            }\n        }\n\n        // This implements the undocumented shift, RES, and SET opcodes,\n        //  which write their result to memory and also to an 8080 register.\n        if (value !== undefined) {\n            if ((opcode & 0x07) === 0)\n                b = value;\n            else if ((opcode & 0x07) === 1)\n                c = value;\n            else if ((opcode & 0x07) === 2)\n                d = value;\n            else if ((opcode & 0x07) === 3)\n                e = value;\n            else if ((opcode & 0x07) === 4)\n                h = value;\n            else if ((opcode & 0x07) === 5)\n                l = value;\n            // 6 is the documented opcode, which doesn't set a register.\n            else if ((opcode & 0x07) === 7)\n                a = value;\n        }\n\n        cycle_counter += cycle_counts_cb[opcode] + 8;\n    };\n    // 0xe1 : POP IX\n    dd_instructions[0xe1] = function () {\n        ix = pop_word();\n    };\n    // 0xe3 : EX (SP), IX\n    dd_instructions[0xe3] = function () {\n        var temp = ix;\n        ix = core.mem_read(sp);\n        ix |= core.mem_read((sp + 1) & 0xffff) << 8;\n        core.mem_write(sp, temp & 0xff);\n        core.mem_write((sp + 1) & 0xffff, (temp >>> 8) & 0xff);\n    };\n    // 0xe5 : PUSH IX\n    dd_instructions[0xe5] = function () {\n        push_word(ix);\n    };\n    // 0xe9 : JP (IX)\n    dd_instructions[0xe9] = function () {\n        pc = (ix - 1) & 0xffff;\n    };\n    // 0xf9 : LD SP, IX\n    dd_instructions[0xf9] = function () {\n        sp = ix;\n    };\n\n\n    ///////////////////////////////////////////////////////////////////////////////\n    /// These tables contain the number of T cycles used for each instruction.\n    /// In a few special cases, such as conditional control flow instructions,\n    ///  additional cycles might be added to these values.\n    /// The total number of cycles is the return value of run_instruction().\n    ///////////////////////////////////////////////////////////////////////////////\n    let cycle_counts = [\n        4, 10, 7, 6, 4, 4, 7, 4, 4, 11, 7, 6, 4, 4, 7, 4,\n        8, 10, 7, 6, 4, 4, 7, 4, 12, 11, 7, 6, 4, 4, 7, 4,\n        7, 10, 16, 6, 4, 4, 7, 4, 7, 11, 16, 6, 4, 4, 7, 4,\n        7, 10, 13, 6, 11, 11, 10, 4, 7, 11, 13, 6, 4, 4, 7, 4,\n        4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4,\n        4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4,\n        4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4,\n        7, 7, 7, 7, 7, 7, 4, 7, 4, 4, 4, 4, 4, 4, 7, 4,\n        4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4,\n        4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4,\n        4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4,\n        4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4,\n        5, 10, 10, 10, 10, 11, 7, 11, 5, 10, 10, 0, 10, 17, 7, 11,\n        5, 10, 10, 11, 10, 11, 7, 11, 5, 4, 10, 11, 10, 0, 7, 11,\n        5, 10, 10, 19, 10, 11, 7, 11, 5, 4, 10, 4, 10, 0, 7, 11,\n        5, 10, 10, 4, 10, 11, 7, 11, 5, 6, 10, 4, 10, 0, 7, 11\n    ];\n\n    let cycle_counts_ed = [\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        12, 12, 15, 20, 8, 14, 8, 9, 12, 12, 15, 20, 8, 14, 8, 9,\n        12, 12, 15, 20, 8, 14, 8, 9, 12, 12, 15, 20, 8, 14, 8, 9,\n        12, 12, 15, 20, 8, 14, 8, 18, 12, 12, 15, 20, 8, 14, 8, 18,\n        12, 12, 15, 20, 8, 14, 8, 0, 12, 12, 15, 20, 8, 14, 8, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        16, 16, 16, 16, 0, 0, 0, 0, 16, 16, 16, 16, 0, 0, 0, 0,\n        16, 16, 16, 16, 0, 0, 0, 0, 16, 16, 16, 16, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n    ];\n\n    let cycle_counts_cb = [\n        8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8,\n        8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8,\n        8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8,\n        8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8,\n        8, 8, 8, 8, 8, 8, 12, 8, 8, 8, 8, 8, 8, 8, 12, 8,\n        8, 8, 8, 8, 8, 8, 12, 8, 8, 8, 8, 8, 8, 8, 12, 8,\n        8, 8, 8, 8, 8, 8, 12, 8, 8, 8, 8, 8, 8, 8, 12, 8,\n        8, 8, 8, 8, 8, 8, 12, 8, 8, 8, 8, 8, 8, 8, 12, 8,\n        8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8,\n        8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8,\n        8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8,\n        8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8,\n        8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8,\n        8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8,\n        8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8,\n        8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8\n    ];\n\n    let cycle_counts_dd = [\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0,\n        0, 14, 20, 10, 8, 8, 11, 0, 0, 15, 20, 10, 8, 8, 11, 0,\n        0, 0, 0, 0, 23, 23, 19, 0, 0, 15, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 8, 8, 19, 0, 0, 0, 0, 0, 8, 8, 19, 0,\n        0, 0, 0, 0, 8, 8, 19, 0, 0, 0, 0, 0, 8, 8, 19, 0,\n        8, 8, 8, 8, 8, 8, 19, 8, 8, 8, 8, 8, 8, 8, 19, 8,\n        19, 19, 19, 19, 19, 19, 0, 19, 0, 0, 0, 0, 8, 8, 19, 0,\n        0, 0, 0, 0, 8, 8, 19, 0, 0, 0, 0, 0, 8, 8, 19, 0,\n        0, 0, 0, 0, 8, 8, 19, 0, 0, 0, 0, 0, 8, 8, 19, 0,\n        0, 0, 0, 0, 8, 8, 19, 0, 0, 0, 0, 0, 8, 8, 19, 0,\n        0, 0, 0, 0, 8, 8, 19, 0, 0, 0, 0, 0, 8, 8, 19, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 14, 0, 23, 0, 15, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0\n    ];\n\n    // There's tons of stuff in this object,\n    //  but only these three functions are the public API.\n    return {\n        getState,\n        setState,\n        reset,\n        reset1,\n        run_instruction,\n        interrupt,\n    };\n}","export const ROM =\n`:10000000C3F005FFFFFFFFFFC32003FFFFFFFFFF5C\n:10001000C3E003FFFFFFFFFFC39004FFFFFFFFFFED\n:10002000FFFFFFFFFFFFFFFF213002C34100FFFF83\n:10003000213005C34100FFFFC7FFFFFFFFFFFFFFA8\n:10004000FF220008C3B001FFFFFFFFFFFFFFFFFF1C\n:10005000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB0\n:10006000FFFFFFFFFFFFDB00E61FED47C931D00FA9\n:10007000CD3101CD8E013AF90FFE00C29600ED5749\n:10008000FE10DA8800C3E30021F70FCD6F01ED6F9A\n:1000900023ED6FC3DA00ED57FE10DAB700AF32FA86\n:1000A0000FED57FE13CADA00FE12CAC200FE11CAD3\n:1000B000C600FE10CAD0002AF70FCD7B01ED6FC33A\n:1000C000E3002AF70FE92AF70F2B22F70FC3E3000B\n:1000D0002AF70F2322F70FC3E3003E00060421F3A3\n:1000E0000F18073E67060221F10F32F90FD9ED5BB9\n:1000F000F70FCD02011ACD0E01D9CBE62310FBC3B9\n:100100006D0021F30F7BCD15017ACD1501C921F1C9\n:100110000FCD1501C9F5CD26017723F10F0F0F0F74\n:10012000CD26017723C9E5215F01E60F856F7EE1CA\n:10013000C93EFFED47CD4001ED57FEFFC0C3310181\n:10014000DDE5010106DD7E00D302DD2379D301CB9D\n:10015000274F3E0A3DC25401D30110E9DDE1C9EB4E\n:1001600028CDAD2EA7E729EF2F6FE6C3ECC747CD0B\n:100170007B01C0233E00772BED57C9ED57473AFA74\n:100180000FFE0078C0AF773D32FA0F78C9000E0A33\n:1001900021500029110100AFD3023DD3014110FECF\n:1001A000EE80ED5220F5C9FFFFFFFFFFFFFFFFFFCD\n:1001B000ED5B00081AE61FFE1FC80000FE1ECAB055\n:1001C00001FE00CAE9014713D521F801CDE301F58D\n:1001D00078211002CDE3016F2600F14FCD9301D1BC\n:1001E000C3B4015F1600197EC9D51100101B7AB384\n:1001F000C2ED01D113C3B4018C837C757067625C5E\n:1002000057524E4845413C3936322F2C2A27252358\n:10021000191A1C1D1E20232527292C2E3133373A6D\n:100220003D4145494D52575C10FFFFFFFFFFFFFF67\n:1002300006060A0D060D0A0D121614120F11120FE2\n:100240000D0D0D0A120F0D0A0806080A0F0A0D0FF0\n:1002500006060A0D060D0A0D121614120F11120FC2\n:100260000D0D0D0A120F0D0A0806080A0612001ECF\n:10027000FD2A0008DD21F10F060621F10F360023CB\n:1002800010FB060611F70F21F60F7E122B1B10FA3A\n:10029000FD7E00FD23E61FFE1FC8FE1E28D221B3EF\n:1002A00002CDE30132F10F3E80F5CD4001F13D205A\n:1002B000F818CF006FE6C3ECC747E36E28E8CEC25C\n:1002C0006BEB4F2F43A746EAE0AECD0410180000B9\n:1002D0000008050C0C0E0013080511050013080991\n:1002E0001200091200130805001305031809191953\n:1002F000191904051209070D0504000216000A0E5B\n:10030000080D00080111041600060E110013051A4D\n:100310000000000000001EFFFFFFFFFFFFFFFFFFC8\n:10032000DD21F10FAF32FA0F32FB0F060621F10F7C\n:1003300036002310FB3AF50FFE00203711F50F2190\n:10034000F40F06047E122B1B10FAED5FCDB50332BD\n:10035000F10F3E0000F53EFFED473AFB0FCDB50330\n:1003600032F60FCD4001ED57FEFFC48E03F13D2064\n:10037000E418C2CD8E01060621F10F36002310FBD2\n:100380003AFA0F21F30FCD1501CD31011892FE106D\n:1003900020083AFB0F3C32FB0FC93AF60F4F21F50C\n:1003A0000F06057EB9200A36003AFA0F3C2732FACA\n:1003B0000F2B10EFC9E607CD2601C9160E14000C4D\n:1003C0000E1205001213140F09041A1F0E08000D57\n:1003D0000E19191909000C0E12131A1FFFFFFFFF47\n:1003E000DD21F10F3E2332FA0F21F10F0606360010\n:1003F0002310FB1E00CD6604CD3101ED57FE043005\n:10040000F4FE0028F05F3AFA0FBB284438429327E5\n:1004100032FA0FCD660421F60F36AE1600CD40013C\n:100420001520FA3AFA0FFE01282C3D27D604273072\n:10043000FBC60427FE0028105F3AFA0F932732FA12\n:100440000F21F60F362818ADED5FE603282818E8CF\n:1004500011BB03C3590411CC03ED530008CD700246\n:10046000CD3101C3E00321F10F3AFA0FCD1501237D\n:100470007BCD260177C93CC33804FF14121417172B\n:100480001214101F0111011101111FFFFFFFFFFFC7\n:10049000DD21F10FFD2100083E50FD77003E20FDDB\n:1004A0007701AFFD770221F10F060636002310FB1E\n:1004B0001680FD7E0121F10FCD15012323FD7E0065\n:1004C000CD15013EFFED47CD4001ED57FEFFC4F3D2\n:1004D0000415C2B204FD7E02D60127FD770247FD56\n:1004E0007E008027FE00CA1105FE60301BFD7700EC\n:1004F000C3B004FD7E01FE00C83D27FD7701FD7EEF\n:1005000002C60227FD7702C9118404DD210000180C\n:1005100003117B04ED530008CDB001CD3101C39030\n:1005200004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD6\n:100530000B0A080A0A0A0606060B0A080A0A0A0A29\n:100540000A0A0B0A080A0A0A0606060A080A0D0D14\n:100550000D0D0D000D05080B0B0B0606060B0A080A\n:100560000A0A0A0606060B0A0608080808080A0B03\n:100570000A080606060606060000001EFFFFFFFF2B\n:1005800021000831D00FDD21F10F22F70FAF32F932\n:100590000F32FA0F0E0A215000CD93010E202130A8\n:1005A00000CD9301C3E300FFFFFFFFFFFFFFFFFF4D\n:1005B00021000811000B7EFEFFC2C205210008C306\n:1005C000B605D3031AFEFFC2D00511000BC3C40544\n:1005D000D304CDE105131AD304CDE1051323C3B62B\n:1005E0000501FF030B78B1C2E405C9FFFFFFFFFF60\n:1005F000ED73D80F31F00FF5C5D5E5DDE5FDE50864\n:10060000D9F5C5D5E5ED57F5C38005FFFFFFFFFF21\n:10061000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEA\n:10062000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDA\n:10063000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCA\n:10064000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBA\n:10065000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA\n:10066000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9A\n:10067000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8A\n:10068000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7A\n:10069000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6A\n:1006A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5A\n:1006B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4A\n:1006C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3A\n:1006D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2A\n:1006E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1A\n:1006F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0A\n:10070000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9\n:10071000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9\n:10072000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD9\n:10073000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC9\n:10074000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB9\n:10075000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA9\n:10076000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF99\n:10077000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF89\n:10078000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF79\n:10079000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF69\n:1007A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF59\n:1007B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF49\n:1007C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF39\n:1007D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF29\n:1007E000FFFF6AC7FBC7500A93C7FBC78DC6BF0D83\n:1007F000B1C643010BBC000FE00F6D0143016E0851\n:00000001FF\n`;\n","\n/**\n * Parser/writer for the \"Intel hex\" format.\n */\n\n/*\n * A regexp that matches lines in a .hex file.\n *\n * One hexadecimal character is matched by \"[0-9A-Fa-f]\".\n * Two hex characters are matched by \"[0-9A-Fa-f]{2}\"\n * Eight or more hex characters are matched by \"[0-9A-Fa-f]{8,}\"\n * A capture group of two hex characters is \"([0-9A-Fa-f]{2})\"\n *\n * Record mark         :\n * 8 or more hex chars  ([0-9A-Fa-f]{8,})\n * Checksum                              ([0-9A-Fa-f]{2})\n * Optional newline                                      (?:\\r\\n|\\r|\\n|)\n */\nconst hexLineRegexp = /:([0-9A-Fa-f]{8,})([0-9A-Fa-f]{2})(?:\\r\\n|\\r|\\n|)/g;\n\n\n// Takes a Uint8Array as input,\n// Returns an integer in the 0-255 range.\nfunction checksum(bytes) {\n    return (-bytes.reduce((sum, v)=>sum + v, 0)) & 0xFF;\n}\n\n// Takes two Uint8Arrays as input,\n// Returns an integer in the 0-255 range.\nfunction checksumTwo(array1, array2) {\n    const partial1 = array1.reduce((sum, v)=>sum + v, 0);\n    const partial2 = array2.reduce((sum, v)=>sum + v, 0);\n    return -( partial1 + partial2 ) & 0xFF;\n}\n\n\n// Trivial utility. Converts a number to hex and pads with zeroes up to 2 characters.\nfunction hexpad(number) {\n    return number.toString(16).toUpperCase().padStart(2, '0');\n}\n\n\n// Polyfill as per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\nNumber.isInteger = Number.isInteger || function(value) {\n    return typeof value === 'number' &&\n    isFinite(value) &&\n    Math.floor(value) === value;\n};\n\n\n/**\n * @class MemoryMap\n *\n * Represents the contents of a memory layout, with main focus into (possibly sparse) blocks of data.\n *<br/>\n * A {@linkcode MemoryMap} acts as a subclass of\n * {@linkcode https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Map|Map}.\n * In every entry of it, the key is the starting address of a data block (an integer number),\n * and the value is the <tt>Uint8Array</tt> with the data for that block.\n *<br/>\n * The main rationale for this is that a .hex file can contain a single block of contiguous\n * data starting at memory address 0 (and it's the common case for simple .hex files),\n * but complex files with several non-contiguous data blocks are also possible, thus\n * the need for a data structure on top of the <tt>Uint8Array</tt>s.\n *<br/>\n * In order to parse <tt>.hex</tt> files, use the {@linkcode MemoryMap.fromHex} <em>static</em> factory\n * method. In order to write <tt>.hex</tt> files, create a new {@linkcode MemoryMap} and call\n * its {@linkcode MemoryMap.asHexString} method.\n *\n * @extends Map\n * @example\n * import MemoryMap from 'nrf-intel-hex';\n *\n * let memMap1 = new MemoryMap();\n * let memMap2 = new MemoryMap([[0, new Uint8Array(1,2,3,4)]]);\n * let memMap3 = new MemoryMap({0: new Uint8Array(1,2,3,4)});\n * let memMap4 = new MemoryMap({0xCF0: new Uint8Array(1,2,3,4)});\n */\nclass MemoryMap {\n    /**\n     * @param {Iterable} blocks The initial value for the memory blocks inside this\n     * <tt>MemoryMap</tt>. All keys must be numeric, and all values must be instances of\n     * <tt>Uint8Array</tt>. Optionally it can also be a plain <tt>Object</tt> with\n     * only numeric keys.\n     */\n    constructor(blocks) {\n        this._blocks = new Map();\n\n        if (blocks && typeof blocks[Symbol.iterator] === 'function') {\n            for (const tuple of blocks) {\n                if (!(tuple instanceof Array) || tuple.length !== 2) {\n                    throw new Error('First parameter to MemoryMap constructor must be an iterable of [addr, bytes] or undefined');\n                }\n                this.set(tuple[0], tuple[1]);\n            }\n        } else if (typeof blocks === 'object') {\n            // Try iterating through the object's keys\n            const addrs = Object.keys(blocks);\n            for (const addr of addrs) {\n                this.set(parseInt(addr), blocks[addr]);\n            }\n\n        } else if (blocks !== undefined && blocks !== null) {\n            throw new Error('First parameter to MemoryMap constructor must be an iterable of [addr, bytes] or undefined');\n        }\n    }\n\n    set(addr, value) {\n        if (!Number.isInteger(addr)) {\n            throw new Error('Address passed to MemoryMap is not an integer');\n        }\n        if (addr < 0) {\n            throw new Error('Address passed to MemoryMap is negative');\n        }\n        if (!(value instanceof Uint8Array)) {\n            throw new Error('Bytes passed to MemoryMap are not an Uint8Array');\n        }\n        return this._blocks.set(addr, value);\n    }\n    // Delegate the following to the 'this._blocks' Map:\n    get(addr)    { return this._blocks.get(addr);    }\n    clear()      { return this._blocks.clear();      }\n    delete(addr) { return this._blocks.delete(addr); }\n    entries()    { return this._blocks.entries();    }\n    forEach(callback, that) { return this._blocks.forEach(callback, that); }\n    has(addr)    { return this._blocks.has(addr);    }\n    keys()       { return this._blocks.keys();       }\n    values()     { return this._blocks.values();     }\n    get size()   { return this._blocks.size;         }\n    [Symbol.iterator]() { return this._blocks[Symbol.iterator](); }\n\n\n    /**\n     * Parses a string containing data formatted in \"Intel HEX\" format, and\n     * returns an instance of {@linkcode MemoryMap}.\n     *<br/>\n     * The insertion order of keys in the {@linkcode MemoryMap} is guaranteed to be strictly\n     * ascending. In other words, when iterating through the {@linkcode MemoryMap}, the addresses\n     * will be ordered in ascending order.\n     *<br/>\n     * The parser has an opinionated behaviour, and will throw a descriptive error if it\n     * encounters some malformed input. Check the project's\n     * {@link https://github.com/NordicSemiconductor/nrf-intel-hex#Features|README file} for details.\n     *<br/>\n     * If <tt>maxBlockSize</tt> is given, any contiguous data block larger than that will\n     * be split in several blocks.\n     *\n     * @param {String} hexText The contents of a .hex file.\n     * @param {Number} [maxBlockSize=Infinity] Maximum size of the returned <tt>Uint8Array</tt>s.\n     *\n     * @return {MemoryMap}\n     *\n     * @example\n     * import MemoryMap from 'nrf-intel-hex';\n     *\n     * let intelHexString =\n     *     \":100000000102030405060708090A0B0C0D0E0F1068\\n\" +\n     *     \":00000001FF\";\n     *\n     * let memMap = MemoryMap.fromHex(intelHexString);\n     *\n     * for (let [address, dataBlock] of memMap) {\n     *     console.log('Data block at ', address, ', bytes: ', dataBlock);\n     * }\n     */\n    static fromHex(hexText, maxBlockSize = Infinity) {\n        const blocks = new MemoryMap();\n\n        let lastCharacterParsed = 0;\n        let matchResult;\n        let recordCount = 0;\n\n        // Upper Linear Base Address, the 16 most significant bits (2 bytes) of\n        // the current 32-bit (4-byte) address\n        // In practice this is a offset that is summed to the \"load offset\" of the\n        // data records\n        let ulba = 0;\n\n        hexLineRegexp.lastIndex = 0; // Reset the regexp, if not it would skip content when called twice\n\n        while ((matchResult = hexLineRegexp.exec(hexText)) !== null) {\n            recordCount++;\n\n            // By default, a regexp loop ignores gaps between matches, but\n            // we want to be aware of them.\n            if (lastCharacterParsed !== matchResult.index) {\n                throw new Error(\n                    'Malformed hex file: Could not parse between characters ' +\n                    lastCharacterParsed +\n                    ' and ' +\n                    matchResult.index +\n                    ' (\"' +\n                    hexText.substring(lastCharacterParsed, Math.min(matchResult.index, lastCharacterParsed + 16)).trim() +\n                    '\")');\n            }\n            lastCharacterParsed = hexLineRegexp.lastIndex;\n\n            // Give pretty names to the match's capture groups\n            const [, recordStr, recordChecksum] = matchResult;\n\n            // String to Uint8Array - https://stackoverflow.com/questions/43131242/how-to-convert-a-hexademical-string-of-data-to-an-arraybuffer-in-javascript\n            const recordBytes = new Uint8Array(recordStr.match(/[\\da-f]{2}/gi).map((h)=>parseInt(h, 16)));\n\n            const recordLength = recordBytes[0];\n            if (recordLength + 4 !== recordBytes.length) {\n                throw new Error('Mismatched record length at record ' + recordCount + ' (' + matchResult[0].trim() + '), expected ' + (recordLength) + ' data bytes but actual length is ' + (recordBytes.length - 4));\n            }\n\n            const cs = checksum(recordBytes);\n            if (parseInt(recordChecksum, 16) !== cs) {\n                throw new Error('Checksum failed at record ' + recordCount + ' (' + matchResult[0].trim() + '), should be ' + cs.toString(16) );\n            }\n\n            const offset = (recordBytes[1] << 8) + recordBytes[2];\n            const recordType = recordBytes[3];\n            const data = recordBytes.subarray(4);\n\n            if (recordType === 0) {\n                // Data record, contains data\n                // Create a new block, at (upper linear base address + offset)\n                if (blocks.has(ulba + offset)) {\n                    throw new Error('Duplicated data at record ' + recordCount + ' (' + matchResult[0].trim() + ')');\n                }\n                if (offset + data.length > 0x10000) {\n                    throw new Error(\n                        'Data at record ' +\n                        recordCount +\n                        ' (' +\n                        matchResult[0].trim() +\n                        ') wraps over 0xFFFF. This would trigger ambiguous behaviour. Please restructure your data so that for every record the data offset plus the data length do not exceed 0xFFFF.');\n                }\n\n                blocks.set( ulba + offset, data );\n\n            } else {\n\n                // All non-data records must have a data offset of zero\n                if (offset !== 0) {\n                    throw new Error('Record ' + recordCount + ' (' + matchResult[0].trim() + ') must have 0000 as data offset.');\n                }\n\n                switch (recordType) {\n                case 1: // EOF\n                    if (lastCharacterParsed !== hexText.length) {\n                        // This record should be at the very end of the string\n                        throw new Error('There is data after an EOF record at record ' + recordCount);\n                    }\n\n                    return blocks.join(maxBlockSize);\n\n                case 2: // Extended Segment Address Record\n                    // Sets the 16 most significant bits of the 20-bit Segment Base\n                    // Address for the subsequent data.\n                    ulba = ((data[0] << 8) + data[1]) << 4;\n                    break;\n\n                case 3: // Start Segment Address Record\n                    // Do nothing. Record type 3 only applies to 16-bit Intel CPUs,\n                    // where it should reset the program counter (CS+IP CPU registers)\n                    break;\n\n                case 4: // Extended Linear Address Record\n                    // Sets the 16 most significant (upper) bits of the 32-bit Linear Address\n                    // for the subsequent data\n                    ulba = ((data[0] << 8) + data[1]) << 16;\n                    break;\n\n                case 5: // Start Linear Address Record\n                    // Do nothing. Record type 5 only applies to 32-bit Intel CPUs,\n                    // where it should reset the program counter (EIP CPU register)\n                    // It might have meaning for other CPU architectures\n                    // (see http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.faqs/ka9903.html )\n                    // but will be ignored nonetheless.\n                    break;\n                default:\n                    throw new Error('Invalid record type 0x' + hexpad(recordType) + ' at record ' + recordCount + ' (should be between 0x00 and 0x05)');\n                }\n            }\n        }\n\n        if (recordCount) {\n            throw new Error('No EOF record at end of file');\n        } else {\n            throw new Error('Malformed .hex file, could not parse any registers');\n        }\n    }\n\n\n    /**\n     * Returns a <strong>new</strong> instance of {@linkcode MemoryMap}, containing\n     * the same data, but concatenating together those memory blocks that are adjacent.\n     *<br/>\n     * The insertion order of keys in the {@linkcode MemoryMap} is guaranteed to be strictly\n     * ascending. In other words, when iterating through the {@linkcode MemoryMap}, the addresses\n     * will be ordered in ascending order.\n     *<br/>\n     * If <tt>maxBlockSize</tt> is given, blocks will be concatenated together only\n     * until the joined block reaches this size in bytes. This means that the output\n     * {@linkcode MemoryMap} might have more entries than the input one.\n     *<br/>\n     * If there is any overlap between blocks, an error will be thrown.\n     *<br/>\n     * The returned {@linkcode MemoryMap} will use newly allocated memory.\n     *\n     * @param {Number} [maxBlockSize=Infinity] Maximum size of the <tt>Uint8Array</tt>s in the\n     * returned {@linkcode MemoryMap}.\n     *\n     * @return {MemoryMap}\n     */\n    join(maxBlockSize = Infinity) {\n\n        // First pass, create a Map of address→length of contiguous blocks\n        const sortedKeys = Array.from(this.keys()).sort((a,b)=>a-b);\n        const blockSizes = new Map();\n        let lastBlockAddr = -1;\n        let lastBlockEndAddr = -1;\n\n        for (let i=0,l=sortedKeys.length; i<l; i++) {\n            const blockAddr = sortedKeys[i];\n            const blockLength = this.get(sortedKeys[i]).length;\n\n            if (lastBlockEndAddr === blockAddr && (lastBlockEndAddr - lastBlockAddr) < maxBlockSize) {\n                // Grow when the previous end address equals the current,\n                // and we don't go over the maximum block size.\n                blockSizes.set(lastBlockAddr, blockSizes.get(lastBlockAddr) + blockLength);\n                lastBlockEndAddr += blockLength;\n            } else if (lastBlockEndAddr <= blockAddr) {\n                // Else mark a new block.\n                blockSizes.set(blockAddr, blockLength);\n                lastBlockAddr = blockAddr;\n                lastBlockEndAddr = blockAddr + blockLength;\n            } else {\n                throw new Error('Overlapping data around address 0x' + blockAddr.toString(16));\n            }\n        }\n\n        // Second pass: allocate memory for the contiguous blocks and copy data around.\n        const mergedBlocks = new MemoryMap();\n        let mergingBlock;\n        let mergingBlockAddr = -1;\n        for (let i=0,l=sortedKeys.length; i<l; i++) {\n            const blockAddr = sortedKeys[i];\n            if (blockSizes.has(blockAddr)) {\n                mergingBlock = new Uint8Array(blockSizes.get(blockAddr));\n                mergedBlocks.set(blockAddr, mergingBlock);\n                mergingBlockAddr = blockAddr;\n            }\n            mergingBlock.set(this.get(blockAddr), blockAddr - mergingBlockAddr);\n        }\n\n        return mergedBlocks;\n    }\n\n    /**\n     * Given a {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Map|<tt>Map</tt>}\n     * of {@linkcode MemoryMap}s, indexed by a alphanumeric ID,\n     * returns a <tt>Map</tt> of address to tuples (<tt>Arrays</tt>s of length 2) of the form\n     * <tt>(id, Uint8Array)</tt>s.\n     *<br/>\n     * The scenario for using this is having several {@linkcode MemoryMap}s, from several calls to\n     * {@link module:nrf-intel-hex~hexToArrays|hexToArrays}, each having a different identifier.\n     * This function locates where those memory block sets overlap, and returns a <tt>Map</tt>\n     * containing addresses as keys, and arrays as values. Each array will contain 1 or more\n     * <tt>(id, Uint8Array)</tt> tuples: the identifier of the memory block set that has\n     * data in that region, and the data itself. When memory block sets overlap, there will\n     * be more than one tuple.\n     *<br/>\n     * The <tt>Uint8Array</tt>s in the output are\n     * {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray|subarrays}\n     * of the input data; new memory is <strong>not</strong> allocated for them.\n     *<br/>\n     * The insertion order of keys in the output <tt>Map</tt> is guaranteed to be strictly\n     * ascending. In other words, when iterating through the <tt>Map</tt>, the addresses\n     * will be ordered in ascending order.\n     *<br/>\n     * When two blocks overlap, the corresponding array of tuples will have the tuples ordered\n     * in the insertion order of the input <tt>Map</tt> of block sets.\n     *<br/>\n     *\n     * @param {Map.MemoryMap} memoryMaps The input memory block sets\n     *\n     * @example\n     * import MemoryMap from 'nrf-intel-hex';\n     *\n     * let memMap1 = MemoryMap.fromHex( hexdata1 );\n     * let memMap2 = MemoryMap.fromHex( hexdata2 );\n     * let memMap3 = MemoryMap.fromHex( hexdata3 );\n     *\n     * let maps = new Map([\n     *  ['file A', blocks1],\n     *  ['file B', blocks2],\n     *  ['file C', blocks3]\n     * ]);\n     *\n     * let overlappings = MemoryMap.overlapMemoryMaps(maps);\n     *\n     * for (let [address, tuples] of overlappings) {\n     *     // if 'tuples' has length > 1, there is an overlap starting at 'address'\n     *\n     *     for (let [address, tuples] of overlappings) {\n     *         let [id, bytes] = tuple;\n     *         // 'id' in this example is either 'file A', 'file B' or 'file C'\n     *     }\n     * }\n     * @return {Map.Array<mixed,Uint8Array>} The map of possibly overlapping memory blocks\n     */\n    static overlapMemoryMaps(memoryMaps) {\n        // First pass: create a list of addresses where any block starts or ends.\n        const cuts = new Set();\n        for (const [, blocks] of memoryMaps) {\n            for (const [address, block] of blocks) {\n                cuts.add(address);\n                cuts.add(address + block.length);\n            }\n        }\n\n        const orderedCuts = Array.from(cuts.values()).sort((a,b)=>a-b);\n        const overlaps = new Map();\n\n        // Second pass: iterate through the cuts, get slices of every intersecting blockset\n        for (let i=0, l=orderedCuts.length-1; i<l; i++) {\n            const cut = orderedCuts[i];\n            const nextCut = orderedCuts[i+1];\n            const tuples = [];\n\n            for (const [setId, blocks] of memoryMaps) {\n                // Find the block with the highest address that is equal or lower to\n                // the current cut (if any)\n                const blockAddr = Array.from(blocks.keys()).reduce((acc, val)=>{\n                    if (val > cut) {\n                        return acc;\n                    }\n                    return Math.max( acc, val );\n                }, -1);\n\n                if (blockAddr !== -1) {\n                    const block = blocks.get(blockAddr);\n                    const subBlockStart = cut - blockAddr;\n                    const subBlockEnd = nextCut - blockAddr;\n\n                    if (subBlockStart < block.length) {\n                        tuples.push([ setId, block.subarray(subBlockStart, subBlockEnd) ]);\n                    }\n                }\n            }\n\n            if (tuples.length) {\n                overlaps.set(cut, tuples);\n            }\n        }\n\n        return overlaps;\n    }\n\n\n    /**\n     * Given the output of the {@linkcode MemoryMap.overlapMemoryMaps|overlapMemoryMaps}\n     * (a <tt>Map</tt> of address to an <tt>Array</tt> of <tt>(id, Uint8Array)</tt> tuples),\n     * returns a {@linkcode MemoryMap}. This discards the IDs in the process.\n     *<br/>\n     * The output <tt>Map</tt> contains as many entries as the input one (using the same addresses\n     * as keys), but the value for each entry will be the <tt>Uint8Array</tt> of the <b>last</b>\n     * tuple for each address in the input data.\n     *<br/>\n     * The scenario is wanting to join together several parsed .hex files, not worrying about\n     * their overlaps.\n     *<br/>\n     *\n     * @param {Map.Array<mixed,Uint8Array>} overlaps The (possibly overlapping) input memory blocks\n     * @return {MemoryMap} The flattened memory blocks\n     */\n    static flattenOverlaps(overlaps) {\n        return new MemoryMap(\n            Array.from(overlaps.entries()).map(([address, tuples]) => {\n                return [address, tuples[tuples.length - 1][1] ];\n            })\n        );\n    }\n\n\n    /**\n     * Returns a new instance of {@linkcode MemoryMap}, where:\n     *\n     * <ul>\n     *  <li>Each key (the start address of each <tt>Uint8Array</tt>) is a multiple of\n     *    <tt>pageSize</tt></li>\n     *  <li>The size of each <tt>Uint8Array</tt> is exactly <tt>pageSize</tt></li>\n     *  <li>Bytes from the input map to bytes in the output</li>\n     *  <li>Bytes not in the input are replaced by a padding value</li>\n     * </ul>\n     *<br/>\n     * The scenario is wanting to prepare pages of bytes for a write operation, where the write\n     * operation affects a whole page/sector at once.\n     *<br/>\n     * The insertion order of keys in the output {@linkcode MemoryMap} is guaranteed\n     * to be strictly ascending. In other words, when iterating through the\n     * {@linkcode MemoryMap}, the addresses will be ordered in ascending order.\n     *<br/>\n     * The <tt>Uint8Array</tt>s in the output will be newly allocated.\n     *<br/>\n     *\n     * @param {Number} [pageSize=1024] The size of the output pages, in bytes\n     * @param {Number} [pad=0xFF] The byte value to use for padding\n     * @return {MemoryMap}\n     */\n    paginate( pageSize=1024, pad=0xFF) {\n        if (pageSize <= 0) {\n            throw new Error('Page size must be greater than zero');\n        }\n        const outPages = new MemoryMap();\n        let page;\n\n        const sortedKeys = Array.from(this.keys()).sort((a,b)=>a-b);\n\n        for (let i=0,l=sortedKeys.length; i<l; i++) {\n            const blockAddr = sortedKeys[i];\n            const block = this.get(blockAddr);\n            const blockLength = block.length;\n            const blockEnd = blockAddr + blockLength;\n\n            for (let pageAddr = blockAddr - (blockAddr % pageSize); pageAddr < blockEnd; pageAddr += pageSize) {\n                page = outPages.get(pageAddr);\n                if (!page) {\n                    page = new Uint8Array(pageSize);\n                    page.fill(pad);\n                    outPages.set(pageAddr, page);\n                }\n\n                const offset = pageAddr - blockAddr;\n                let subBlock;\n                if (offset <= 0) {\n                    // First page which intersects the block\n                    subBlock = block.subarray(0, Math.min(pageSize + offset, blockLength));\n                    page.set(subBlock, -offset);\n                } else {\n                    // Any other page which intersects the block\n                    subBlock = block.subarray(offset, offset + Math.min(pageSize, blockLength - offset));\n                    page.set(subBlock, 0);\n                }\n            }\n        }\n\n        return outPages;\n    }\n\n\n    /**\n     * Locates the <tt>Uint8Array</tt> which contains the given offset,\n     * and returns the four bytes held at that offset, as a 32-bit unsigned integer.\n     *\n     *<br/>\n     * Behaviour is similar to {@linkcode https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32|DataView.prototype.getUint32},\n     * except that this operates over a {@linkcode MemoryMap} instead of\n     * over an <tt>ArrayBuffer</tt>, and that this may return <tt>undefined</tt> if\n     * the address is not <em>entirely</em> contained within one of the <tt>Uint8Array</tt>s.\n     *<br/>\n     *\n     * @param {Number} offset The memory offset to read the data\n     * @param {Boolean} [littleEndian=false] Whether to fetch the 4 bytes as a little- or big-endian integer\n     * @return {Number|undefined} An unsigned 32-bit integer number\n     */\n    getUint32(offset, littleEndian) {\n        const keys = Array.from(this.keys());\n\n        for (let i=0,l=keys.length; i<l; i++) {\n            const blockAddr = keys[i];\n            const block = this.get(blockAddr);\n            const blockLength = block.length;\n            const blockEnd = blockAddr + blockLength;\n\n            if (blockAddr <= offset && (offset+4) <= blockEnd) {\n                return (new DataView(block.buffer, offset - blockAddr, 4)).getUint32(0, littleEndian);\n            }\n        }\n        return;\n    }\n\n\n    /**\n     * Returns a <tt>String</tt> of text representing a .hex file.\n     * <br/>\n     * The writer has an opinionated behaviour. Check the project's\n     * {@link https://github.com/NordicSemiconductor/nrf-intel-hex#Features|README file} for details.\n     *\n     * @param {Number} [lineSize=16] Maximum number of bytes to be encoded in each data record.\n     * Must have a value between 1 and 255, as per the specification.\n     *\n     * @return {String} String of text with the .hex representation of the input binary data\n     *\n     * @example\n     * import MemoryMap from 'nrf-intel-hex';\n     *\n     * let memMap = new MemoryMap();\n     * let bytes = new Uint8Array(....);\n     * memMap.set(0x0FF80000, bytes); // The block with 'bytes' will start at offset 0x0FF80000\n     *\n     * let string = memMap.asHexString();\n     */\n    asHexString(lineSize = 16) {\n        let lowAddress  = 0;    // 16 least significant bits of the current addr\n        let highAddress = -1 << 16; // 16 most significant bits of the current addr\n        const records = [];\n        if (lineSize <=0) {\n            throw new Error('Size of record must be greater than zero');\n        } else if (lineSize > 255) {\n            throw new Error('Size of record must be less than 256');\n        }\n\n        // Placeholders\n        const offsetRecord = new Uint8Array(6);\n        const recordHeader = new Uint8Array(4);\n\n        const sortedKeys = Array.from(this.keys()).sort((a,b)=>a-b);\n        for (let i=0,l=sortedKeys.length; i<l; i++) {\n            const blockAddr = sortedKeys[i];\n            const block = this.get(blockAddr);\n\n            // Sanity checks\n            if (!(block instanceof Uint8Array)) {\n                throw new Error('Block at offset ' + blockAddr + ' is not an Uint8Array');\n            }\n            if (blockAddr < 0) {\n                throw new Error('Block at offset ' + blockAddr + ' has a negative thus invalid address');\n            }\n            const blockSize = block.length;\n            if (!blockSize) { continue; }   // Skip zero-length blocks\n\n\n            if (blockAddr > (highAddress + 0xFFFF)) {\n                // Insert a new 0x04 record to jump to a new 64KiB block\n\n                // Round up the least significant 16 bits - no bitmasks because they trigger\n                // base-2 negative numbers, whereas subtracting the modulo maintains precision\n                highAddress = blockAddr - blockAddr % 0x10000;\n                lowAddress = 0;\n\n                offsetRecord[0] = 2;    // Length\n                offsetRecord[1] = 0;    // Load offset, high byte\n                offsetRecord[2] = 0;    // Load offset, low byte\n                offsetRecord[3] = 4;    // Record type\n                offsetRecord[4] = highAddress >> 24;    // new address offset, high byte\n                offsetRecord[5] = highAddress >> 16;    // new address offset, low byte\n\n                records.push(\n                    ':' +\n                    Array.prototype.map.call(offsetRecord, hexpad).join('') +\n                    hexpad(checksum(offsetRecord))\n                );\n            }\n\n            if (blockAddr < (highAddress + lowAddress)) {\n                throw new Error(\n                    'Block starting at 0x' +\n                    blockAddr.toString(16) +\n                    ' overlaps with a previous block.');\n            }\n\n            lowAddress = blockAddr % 0x10000;\n            let blockOffset = 0;\n            const blockEnd = blockAddr + blockSize;\n            if (blockEnd > 0xFFFFFFFF) {\n                throw new Error('Data cannot be over 0xFFFFFFFF');\n            }\n\n            // Loop for every 64KiB memory segment that spans this block\n            while (highAddress + lowAddress < blockEnd) {\n\n                if (lowAddress > 0xFFFF) {\n                    // Insert a new 0x04 record to jump to a new 64KiB block\n                    highAddress += 1 << 16; // Increase by one\n                    lowAddress = 0;\n\n                    offsetRecord[0] = 2;    // Length\n                    offsetRecord[1] = 0;    // Load offset, high byte\n                    offsetRecord[2] = 0;    // Load offset, low byte\n                    offsetRecord[3] = 4;    // Record type\n                    offsetRecord[4] = highAddress >> 24;    // new address offset, high byte\n                    offsetRecord[5] = highAddress >> 16;    // new address offset, low byte\n\n                    records.push(\n                        ':' +\n                        Array.prototype.map.call(offsetRecord, hexpad).join('') +\n                        hexpad(checksum(offsetRecord))\n                    );\n                }\n\n                let recordSize = -1;\n                // Loop for every record for that spans the current 64KiB memory segment\n                while (lowAddress < 0x10000 && recordSize) {\n                    recordSize = Math.min(\n                        lineSize,                            // Normal case\n                        blockEnd - highAddress - lowAddress, // End of block\n                        0x10000 - lowAddress                 // End of low addresses\n                    );\n\n                    if (recordSize) {\n\n                        recordHeader[0] = recordSize;   // Length\n                        recordHeader[1] = lowAddress >> 8;    // Load offset, high byte\n                        recordHeader[2] = lowAddress;    // Load offset, low byte\n                        recordHeader[3] = 0;    // Record type\n\n                        const subBlock = block.subarray(blockOffset, blockOffset + recordSize);   // Data bytes for this record\n\n                        records.push(\n                            ':' +\n                            Array.prototype.map.call(recordHeader, hexpad).join('') +\n                            Array.prototype.map.call(subBlock, hexpad).join('') +\n                            hexpad(checksumTwo(recordHeader, subBlock))\n                        );\n\n                        blockOffset += recordSize;\n                        lowAddress += recordSize;\n                    }\n                }\n            }\n        }\n\n        records.push(':00000001FF');    // EOF record\n\n        return records.join('\\n');\n    }\n\n\n    /**\n     * Performs a deep copy of the current {@linkcode MemoryMap}, returning a new one\n     * with exactly the same contents, but allocating new memory for each of its\n     * <tt>Uint8Array</tt>s.\n     *\n     * @return {MemoryMap}\n     */\n    clone() {\n        const cloned = new MemoryMap();\n\n        for (let [addr, value] of this) {\n            cloned.set(addr, new Uint8Array(value));\n        }\n\n        return cloned;\n    }\n\n\n    /**\n     * Given one <tt>Uint8Array</tt>, looks through its contents and returns a new\n     * {@linkcode MemoryMap}, stripping away those regions where there are only\n     * padding bytes.\n     * <br/>\n     * The start of the input <tt>Uint8Array</tt> is assumed to be offset zero for the output.\n     * <br/>\n     * The use case here is dumping memory from a working device and try to see the\n     * \"interesting\" memory regions it has. This assumes that there is a constant,\n     * predefined padding byte value being used in the \"non-interesting\" regions.\n     * In other words: this will work as long as the dump comes from a flash memory\n     * which has been previously erased (thus <tt>0xFF</tt>s for padding), or from a\n     * previously blanked HDD (thus <tt>0x00</tt>s for padding).\n     * <br/>\n     * This method uses <tt>subarray</tt> on the input data, and thus does not allocate memory\n     * for the <tt>Uint8Array</tt>s.\n     *\n     * @param {Uint8Array} bytes The input data\n     * @param {Number} [padByte=0xFF] The value of the byte assumed to be used as padding\n     * @param {Number} [minPadLength=64] The minimum number of consecutive pad bytes to\n     * be considered actual padding\n     *\n     * @return {MemoryMap}\n     */\n    static fromPaddedUint8Array(bytes, padByte=0xFF, minPadLength=64) {\n\n        if (!(bytes instanceof Uint8Array)) {\n            throw new Error('Bytes passed to fromPaddedUint8Array are not an Uint8Array');\n        }\n\n        // The algorithm used is naïve and checks every byte.\n        // An obvious optimization would be to implement Boyer-Moore\n        // (see https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm )\n        // or otherwise start skipping up to minPadLength bytes when going through a non-pad\n        // byte.\n        // Anyway, we could expect a lot of cases where there is a majority of pad bytes,\n        // and the algorithm should check most of them anyway, so the perf gain is questionable.\n\n        const memMap = new MemoryMap();\n        let consecutivePads = 0;\n        let lastNonPad = -1;\n        let firstNonPad = 0;\n        let skippingBytes = false;\n        const l = bytes.length;\n\n        for (let addr = 0; addr < l; addr++) {\n            const byte = bytes[addr];\n\n            if (byte === padByte) {\n                consecutivePads++;\n                if (consecutivePads >= minPadLength) {\n                    // Edge case: ignore writing a zero-length block when skipping\n                    // bytes at the beginning of the input\n                    if (lastNonPad !== -1) {\n                        /// Add the previous block to the result memMap\n                        memMap.set(firstNonPad, bytes.subarray(firstNonPad, lastNonPad+1));\n                    }\n\n                    skippingBytes = true;\n                }\n            } else {\n                if (skippingBytes) {\n                    skippingBytes = false;\n                    firstNonPad = addr;\n                }\n                lastNonPad = addr;\n                consecutivePads = 0;\n            }\n        }\n\n        // At EOF, add the last block if not skipping bytes already (and input not empty)\n        if (!skippingBytes && lastNonPad !== -1) {\n            memMap.set(firstNonPad, bytes.subarray(firstNonPad, l));\n        }\n\n        return memMap;\n    }\n\n\n    /**\n     * Returns a new instance of {@linkcode MemoryMap}, containing only data between\n     * the addresses <tt>address</tt> and <tt>address + length</tt>.\n     * Behaviour is similar to {@linkcode https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/slice|Array.prototype.slice},\n     * in that the return value is a portion of the current {@linkcode MemoryMap}.\n     *\n     * <br/>\n     * The returned {@linkcode MemoryMap} might be empty.\n     *\n     * <br/>\n     * Internally, this uses <tt>subarray</tt>, so new memory is not allocated.\n     *\n     * @param {Number} address The start address of the slice\n     * @param {Number} length The length of memory map to slice out\n     * @return {MemoryMap}\n     */\n    slice(address, length = Infinity){\n        if (length < 0) {\n            throw new Error('Length of the slice cannot be negative');\n        }\n\n        const sliced = new MemoryMap();\n\n        for (let [blockAddr, block] of this) {\n            const blockLength = block.length;\n\n            if ((blockAddr + blockLength) >= address && blockAddr < (address + length)) {\n                const sliceStart = Math.max(address, blockAddr);\n                const sliceEnd = Math.min(address + length, blockAddr + blockLength);\n                const sliceLength = sliceEnd - sliceStart;\n                const relativeSliceStart = sliceStart - blockAddr;\n\n                if (sliceLength > 0) {\n                    sliced.set(sliceStart, block.subarray(relativeSliceStart, relativeSliceStart + sliceLength));\n                }\n            }\n        }\n        return sliced;\n    }\n\n    /**\n     * Returns a new instance of {@linkcode https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32|Uint8Array}, containing only data between\n     * the addresses <tt>address</tt> and <tt>address + length</tt>. Any byte without a value\n     * in the input {@linkcode MemoryMap} will have a value of <tt>padByte</tt>.\n     *\n     * <br/>\n     * This method allocates new memory.\n     *\n     * @param {Number} address The start address of the slice\n     * @param {Number} length The length of memory map to slice out\n     * @param {Number} [padByte=0xFF] The value of the byte assumed to be used as padding\n     * @return {MemoryMap}\n     */\n    slicePad(address, length, padByte=0xFF){\n        if (length < 0) {\n            throw new Error('Length of the slice cannot be negative');\n        }\n        \n        const out = (new Uint8Array(length)).fill(padByte);\n\n        for (let [blockAddr, block] of this) {\n            const blockLength = block.length;\n\n            if ((blockAddr + blockLength) >= address && blockAddr < (address + length)) {\n                const sliceStart = Math.max(address, blockAddr);\n                const sliceEnd = Math.min(address + length, blockAddr + blockLength);\n                const sliceLength = sliceEnd - sliceStart;\n                const relativeSliceStart = sliceStart - blockAddr;\n\n                if (sliceLength > 0) {\n                    out.set(block.subarray(relativeSliceStart, relativeSliceStart + sliceLength), sliceStart - address);\n                }\n            }\n        }\n        return out;\n    }\n\n    /**\n     * Checks whether the current memory map contains the one given as a parameter.\n     *\n     * <br/>\n     * \"Contains\" means that all the offsets that have a byte value in the given\n     * memory map have a value in the current memory map, and that the byte values\n     * are the same.\n     *\n     * <br/>\n     * An empty memory map is always contained in any other memory map.\n     *\n     * <br/>\n     * Returns boolean <tt>true</tt> if the memory map is contained, <tt>false</tt>\n     * otherwise.\n     *\n     * @param {MemoryMap} memMap The memory map to check\n     * @return {Boolean}\n     */\n    contains(memMap) {\n        for (let [blockAddr, block] of memMap) {\n\n            const blockLength = block.length;\n\n            const slice = this.slice(blockAddr, blockLength).join().get(blockAddr);\n\n            if ((!slice) || slice.length !== blockLength ) {\n                return false;\n            }\n\n            for (const i in block) {\n                if (block[i] !== slice[i]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n\n\nexport default MemoryMap;\n\n","import { Z80 } from './z80';\nimport { ROM } from './ROM';\nimport MemoryMap from 'nrf-intel-hex';\n\nlet running = false;\nlet active = true;\nlet yieldFlag = false;\n\nconst memory = Array(4000).fill(0xFF);\nconst inPorts = Array(256).fill(0xFF);\nconst outPorts = Array(256).fill(0xFF);\n\nconst cpu = Z80({\n    mem_read: (addr) => memory[addr],\n    mem_write: (addr, value) => memory[addr] = value,\n    io_read: (port) => {\n        yieldFlag = true;\n        return inPorts[port & 0xFF];\n    },\n    io_write: (port, value) => {\n        yieldFlag = true;\n        outPorts[port & 0xFF] = value;\n        updateDisplay();\n        postOutPorts();\n    },\n});\n\nconst display = Array(6).fill(0);\n\nself.onmessage = event => {\n    if (event.data.type === 'INIT') {\n        loadROM();\n        cpu.reset();\n        running = true;\n        run();\n    }\n    if (event.data.type === 'PAUSE') {\n        if (active) {\n            active = false;\n            running = false;\n        }\n        else {\n            active = true;\n            running = true;\n            run();\n        }\n    }\n    if (event.data.type === 'RESUME') {\n    }\n    else if (event.data.type === 'RESET') {\n        console.log('resetting');\n        cpu.reset();\n        running = true;\n        run();\n    }\n    else if (event.data.type === 'SET_INPUT_VALUE') {\n        const { port, value } = event.data;\n        inPorts[port] = value;\n    }\n    else if (event.data.type === 'NMI') {\n        cpu.interrupt(true);\n    }\n    else if (event.data.type === 'HIDDEN') {\n        let hidden = event.data.value;\n        if (hidden) {\n            running = false;\n        }\n        else if (active) {\n            running = true;\n            run();\n        }\n        else {\n            console.log('not active');\n        }\n    }\n};\n\nlet pending = false;\nfunction run() {\n    if (pending) return;\n    for (let i = 0; i < 1500 ; i++) {\n        if (!running) return;\n    // while (!yieldFlag) {\n        cpu.run_instruction();\n    }\n    yieldFlag = false;\n    if (running) {\n        pending = true;\n        setTimeout(function(){\n            pending = false;\n            run();\n        }, 16)\n    };\n}\n\nfunction updateDisplay() {\n    const digits = outPorts[1];\n    const segments = outPorts[2];\n    let mask = 0x01;\n    for (let i = 0; i < 6; i++) {\n        if (digits & mask){\n            display[i] = segments;\n        }\n        mask = mask << 1;\n    }\n}\n\nfunction getPortsBuffer(){\n    var buffer = new ArrayBuffer(4);\n    var view = new Uint8Array(buffer);\n    view[0] = outPorts[0];\n    view[1] = outPorts[1];\n    view[2] = outPorts[2];\n    return buffer;\n}\n\nfunction getDisplayBuffer(){\n    var buffer = new ArrayBuffer(6);\n    var view = new Uint8Array(buffer);\n    for (let i = 0; i < 6; i++) {\n        view[i] = display[i];\n    }\n    return buffer;\n}\n\nfunction postOutPorts() {\n    const buffer = getPortsBuffer();\n    const display = getDisplayBuffer();\n    self.postMessage({\n        buffer, display\n    }, [buffer, display]);\n}\n\nfunction loadROM() {\n    const blocks = MemoryMap.fromHex(ROM);\n\n    for (let address of blocks.keys()) {\n      const block = blocks.get(address);\n      for (let i = address; i < address + block.length; i++) {\n        memory[i] = block[i];\n      }\n    }\n  }\n"]}